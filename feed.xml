<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.1">Jekyll</generator><link href="https://httpscolonforwardslashforwardslashwwwdotzoltanbalazsdotcom.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://httpscolonforwardslashforwardslashwwwdotzoltanbalazsdotcom.com/" rel="alternate" type="text/html" /><updated>2024-12-24T10:57:13+00:00</updated><id>https://httpscolonforwardslashforwardslashwwwdotzoltanbalazsdotcom.com/feed.xml</id><title type="html">Jump ESP, jump!</title><subtitle>Because Google started to delete hacking related blog posts  without using a single brain cell, I had to learn just another framework. Thx Google </subtitle><entry><title type="html">Personal VPN services are snake-oil</title><link href="https://httpscolonforwardslashforwardslashwwwdotzoltanbalazsdotcom.com/2024/03/01/VPN-Snakeoil.html" rel="alternate" type="text/html" title="Personal VPN services are snake-oil" /><published>2024-03-01T10:19:41+00:00</published><updated>2024-03-01T10:19:41+00:00</updated><id>https://httpscolonforwardslashforwardslashwwwdotzoltanbalazsdotcom.com/2024/03/01/VPN-Snakeoil</id><content type="html" xml:base="https://httpscolonforwardslashforwardslashwwwdotzoltanbalazsdotcom.com/2024/03/01/VPN-Snakeoil.html"><![CDATA[<h1 id="intro">Intro</h1>
<p>Personal VPN services are a multi-million dollar business. But is it worth your money?</p>

<p><img src="/_img/VPN-1.png" alt="NordVPN" /><br />
If they can <a href="https://www.thoughtleaders.io/blog/how-much-money-does-pewdiepie-make">afford to sponsor Pewdiepie</a>, they should do something right, right? Fifty million flies can’t be wrong!</p>

<p>This is going to be a complex topic, so bear with me.</p>

<p>The statement I would like to prove:<br />
There are only a few problems for a few people worldwide where the answer is using a personal VPN service. 
You don’t need a personal VPN service if you are an average Internet user. 
If you are a tech-savvy user, you can do much better than using a VPN.<br />
Personal VPNs are the <a href="https://en.wikipedia.org/wiki/Homeopathy#Evidence_and_efficacy">homeopathic medicines</a> of the tech industry. Also known as a scam.</p>

<h1 id="glossary">Glossary</h1>
<p>By personal/commercial VPN service, I mean NordVPN, Tunnelbear, Mullvad VPN, etc. Company VPNs, or a VPN to phone into your home network, are out of the scope of this article.<br />
By public Wi-Fi, I mean Wi-Fi services where it is either open or the WPA key is shared with everyone. From a security point of view, there is not much difference between the two.</p>

<p>Let’s break down the problem of privacy and security. Let’s start with …</p>

<h1 id="security">Security</h1>
<p>Fifteen years ago, it was common malpractice that even though websites used HTTPS for the login page, the rest of the communication was over HTTP. One could steal the authentication cookie from the unencrypted Wi-Fi stream and use that to log in to that service. Tools like Surfjack and <a href="https://www.youtube.com/watch?v=etyCbkOKHsc">Firesheep</a> were popular tools for wannabe hackers. Back then, using a personal VPN service at public Wi-Fi made sense. Also, many email clients checked their email using unencrypted POP3 or IMAP protocols.</p>

<p>But nowadays, there <a href="https://transparencyreport.google.com/https/overview">is practically no vital service on the Internet</a>, which does not run on HTTPS.</p>

<p>OK, but what about tools like <a href="https://github.com/moxie0/sslstrip">SSLStrip?</a>
SSLStrip works like this:</p>
<ol>
  <li>User types www.mybanklogin.com</li>
  <li>The browser connects to clear-text, unprotected http://www.mybanklogin.com</li>
  <li>Attacker having active man-in-the-middle (<a href="https://en.wikipedia.org/wiki/Man-in-the-middle_attack">MiTM</a>) capability sees this traffic</li>
  <li>The web server notifies the user’s browser that it should use the secure https://www.mybanklogin.com site</li>
  <li>The attacker removes this notification</li>
  <li>The user continues the login process over the insecure, unencrypted http://www.mybanklogin.com</li>
</ol>

<p>So, can hackers steal my username and password? First, for accounts that matter, you should use 2FA (short for multi-factor authentication). It would be best to use unphisable 2FA like FIDO2/webauthn (e.g. Yubikey) for accounts that matter. 
Nowadays, most browsers implement <a href="https://therecord.media/eff-to-deprecate-https-everywhere-extension-as-https-is-becoming-ubiquitous">“HTTPS only mode”</a>. Next time, instead of turning on your VPN, you should check if your browser already uses HTTPS only mode, and if not, turn that on. For example, Safari does that by default.<br />
Ask your service provider to implement <a href="https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security">HSTS</a>.
It is excellent about HSTS that the user cannot bypass certificate errors. And the browser will auto-connect to HTTPS by default. 
The good news is that if you use mobile apps, almost all are secure already. Just keep your mobile OS and apps up-to-date. No one will spoil a precious <a href="https://en.wikipedia.org/wiki/Zero-day_(computing)">0-day</a> to attack you. 
If you are worried about DNS MiTM, use <a href="https://support.mozilla.org/en-US/kb/dns-over-https">DNS over HTTP</a> in your browser. 
OK, but what about tools like <a href="https://www.rapid7.com/blog/post/2015/07/15/the-new-metasploit-browser-autopwn-strikes-faster-and-smarter-part-1/">Metasploit browser autopwn</a>? 
Well, the good news is that it is much easier to keep your browser up-to-date compared to ~ ten years ago. Nowadays, however, it is rare that recent browser exploits are openly available for any hacker to use. If you are a target of a government, spy agency, or hacker-for-hire services, yes, they may have the resources to hack your browser, but chances are you are not that important. Sorry. And if you are that important, VPNs will not decrease your risks.</p>

<p>One massive problem with personal VPN services is that they are working to fail open. If the connection fails, your connection is not “protected” anymore. Some premium VPN providers sell “kill switch” functionality, but I am sure less than 1% of the users use this properly.</p>

<p>Looking at the practical side, how many legit stories do you know where someone lost money that could have been avoided just by using a VPN? I have never heard such a story. The “ Darkhotel “ attacker group could have been such an example, except that a VPN would not protect you against their attack, as they used fake Wi-Fi captive portals to deliver the exploit/malware. And before logging into a hotel Wi-Fi portal, you can’t start your VPN …</p>

<p>And before I forget, let’s quickly discuss free VPNs. Never, ever install a free VPN solution. They will abuse your network connectivity, and other malicious or non-malicious users will use it to do whatever they want. It is like inviting one thousand unknown people to your house to have a party and leave them unattended. You can find many stories where free VPNs are actually malware.</p>

<p><img src="/_img/vpn-2.webp" alt="VPN_ads" /></p>

<h1 id="privacy-concerns">Privacy concerns</h1>
<p>OK, but what about my DNS and TLS records being exposed to everyone so they can follow what I am doing? In a public place, anyone can look at your display already. Or, if you are worried about your ISP selling your traffic data, there are better options for you. 
Use <a href="https://developers.cloudflare.com/1.1.1.1/encryption/dns-over-https/encrypted-dns-browsers/">DNS over HTTPS</a>, for example. 
You have to use a VPN provider you trust better than your ISP/Wi-Fi provider.
Also, as <a href="https://support.mozilla.org/en-US/kb/understand-encrypted-client-hello">Encrypted Client Hello</a> is about to start soon, it will be exponentially harder for eavesdroppers to figure out which sites you are trying to visit.</p>

<p>But if you care about privacy, the answer is always ToR, ToR browser or Tails, and never VPN. Except in cases where you first have to hide your ToR usage using a VPN, which is a rare exception among users. If you don’t understand why you would need that, you probably don’t need that complexity. 
Tor Browser uses uncountable techniques that prevent tracking your browser. And if your privacy is essential against local Wi-Fi attackers, your ISP, why is the ad industry not in scope? Adblockers are only half the solution against tracking.</p>

<h1 id="when-to-use-a-personal-vpn">When to use a personal VPN?</h1>
<ol>
  <li>Geofence bypass for region-locked content.</li>
  <li>Piracy. Not that you should not support your artists/musicians/content creators, filmmakers, actors, … but I agree that there are situations in life when piracy is the only ethical option.</li>
  <li>Soft network block/censorship. Do your own research. Don’t end up in jail.</li>
</ol>

<h1 id="conclusion">Conclusion</h1>
<p>Claims made by VPN companies:</p>
<ol>
  <li>
    <p>VPNs reduce the risk of “getting hacked,” whatever that means. 
This is not true. Additional services provided by VPNs, like URL filtering, can reduce your risk. However, it is more effective to use URL filtering on the endpoint level, not the network level, as most VPN companies do.</p>
  </li>
  <li>
    <p>VPNs protect your privacy<br />
Even though they increase your privacy, it is still far from what ToR can do for you.</p>
  </li>
</ol>

<p>Suppose you want to increase your privacy and security. Instead of watching VPN reviews on YouTube, I recommend that you patch your operating system and your browser and configure always HTTPS and DoH in your browser. Use an ad blocker or, even better, a <a href="https://www.privacytools.io/private-browser">browser built with privacy in mind</a>. If you frequently install new applications, use antivirus/endpoint protection on your non-mobile OS. For Windows, the built-in default Microsoft Defender is a good option. Congratulations, you are in a better position compared to using a VPN, and you don’t have to pay for it, and you don’t have to enable it all the time.</p>

<p><img src="/_img/vpn-3.jpg" alt="Change-my-mind" /></p>

<h1 id="what-to-read">What to read?</h1>
<p>I found these articles also useful. As this is a complex topic, with different aspects, if you want to read more, this is where I recommend to start:<br />
<a href="https://overengineer.dev/blog/2019/04/08/very-precarious-narrative.html">overengineer.dev</a><br />
<a href="https://krebsonsecurity.com/2017/03/post-fcc-privacy-rules-should-you-vpn/">krebsonsecurity.com</a><br />
<a href="https://gist.github.com/joepie91/5a9909939e6ce7d09e29">gist.github.com/joepie91</a><br />
<a href="https://www.spacebar.news/you-dont-need-a-vpn/">www.spacebar.news</a><br />
<a href="https://www.forbes.com/advisor/business/vpn-statistics/">www.forbes.com</a><br />
<a href="https://it.slashdot.org/story/22/01/02/2143256/nbc-you-probably-dont-need-to-rely-on-a-vpn-anymore">it.slashdot.org</a></p>

<h1 id="ps">PS</h1>
<p>Yes, some of these VPN products provide extra services/functions/protections. And some of these extras make sense. But that does not mean that VPN is the answer to your problems overall.</p>

<h1 id="ps-2">PS 2</h1>
<p>WPA3 can support encryption and privacy on open, non-password-protected networks. I have not seen it anywhere in the wild, but the future is bright. If you operate open Wi-Fi networks, please, please, upgrade to WPA3.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Intro Personal VPN services are a multi-million dollar business. But is it worth your money?]]></summary></entry><entry><title type="html">“Just” migrate to Jekyll …</title><link href="https://httpscolonforwardslashforwardslashwwwdotzoltanbalazsdotcom.com/2023/04/05/Just_use_Jekyll.html" rel="alternate" type="text/html" title="“Just” migrate to Jekyll …" /><published>2023-04-05T10:49:41+00:00</published><updated>2023-04-05T10:49:41+00:00</updated><id>https://httpscolonforwardslashforwardslashwwwdotzoltanbalazsdotcom.com/2023/04/05/Just_use_Jekyll</id><content type="html" xml:base="https://httpscolonforwardslashforwardslashwwwdotzoltanbalazsdotcom.com/2023/04/05/Just_use_Jekyll.html"><![CDATA[<h1 id="intro">Intro</h1>
<p><a href="/2022/09/16/Google.html">As I already ranted about it</a>, I am not very satisfied with multiple Google services recently (blogger, YouTube), so I started looking for alternative solutions for my blog. Based on a quick Twitter poll, all the cool kids use Jekyll and Github pages nowadays, and I did not want to miss out …<br />
Had I known how much time I had to spend on this blog migration, I probably would not start it in the first place …</p>
<h1 id="jekyll">Jekyll</h1>
<p>Why Jekyll and Github pages?</p>
<ul>
  <li>Because it is free</li>
  <li>I don’t have to operate my own webserver</li>
  <li>I don’t have to maintain proper TLS config</li>
  <li>It is a static website</li>
  <li>Github is more secure than most services</li>
</ul>

<p>My first task was installing Jekyll locally to test my web pages locally. This was my first mistake. I created this Jekyll environment on the macOS like an animal - without using Docker. <br />
<img src="/_img/jekyll.jpg" alt="Jekyll" /><br />
<img src="/_img/maneuver.jpg" alt="maneuver" /><br />
 Or ~1 hour at least. Pro tip: use <a href="https://hub.docker.com/r/jekyll/jekyll/">Docker</a>. Cool, now we have it. I spent significant time trying to figure out the proper _config.yml config and Gemfile parameters, but I think I figured out what I needed, kinda. Not perfect, but it works.</p>

<p>The next challenge was saving the blog posts from Blogger/Blogspot in a Jekyll-readable format. I tried multiple solutions, but only <a href="https://gist.github.com/rupeshtiwari/80f2203fee697a94e4b11b75b856aa56">this</a> was close enough to do anything. After that, I realized the formatting was effed up on numerous posts. It took me a while to figure out the problem was image styles and another &lt;br&gt;\ related issue I cannot reproduce anymore. It did not help that I tried to debug this problem on a machine where I did not have the Jekyll installation, and I waited 5 minutes for Github to rebuild the site to test that I still did not figure out what the issue was. Clearly, I did set up the local dev env to avoid this exact situation …</p>

<p>The next step was to download all the images from the blog posts, store them in the website repo, and rewrite all the URLs on the pages. You would think this is a trivial exercise, but I ended up with ~100 lines of Python code, running and rerunning it at least seven times to get there.</p>

<p>Next, I realized that the “content creation” date was somehow messed up with the last update, but the code looks OK. So I fixed this on all the blog posts manually. While doing this, I realized that the blog post exporter script only saved 25 posts, probably a limitation on the blogger feed system itself. So I had to download the rest of the blog posts, download the images again, download the incorrect HTML tags again, fix the image URLs, and fix the creation dates.</p>

<p>Meanwhile, I always had this issue: whenever I pushed the latest version, my custom domain name did not work anymore - I had to configure this in the CNAME file. And after I had already built and rebuilt, and rebuilt the site with Github pages, it turned out there was a <a href="https://github.com/Z6543/Z6543.github.io/blob/8bff56adf2ba60ab65cc77597e073e790b050fec/.github/workflows/jekyll.yml#L15">caching possibility</a>, which in fact, can change the build time from five minutes to one minute. Probably, there is an even better solution, but this is good enough for now.</p>

<h1 id="conclusion">Conclusion</h1>
<p>Am I satisfied with the overall result? Yes. <br />
Am I satisfied with how I got here? No.<br />
Do I recommend this route? If you have free time, yes.<br />
Should this be so complicated? I hope not. <br />
Do I like that my website uses Ruby? Hell no.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Intro As I already ranted about it, I am not very satisfied with multiple Google services recently (blogger, YouTube), so I started looking for alternative solutions for my blog. Based on a quick Twitter poll, all the cool kids use Jekyll and Github pages nowadays, and I did not want to miss out … Had I known how much time I had to spend on this blog migration, I probably would not start it in the first place … Jekyll Why Jekyll and Github pages? Because it is free I don’t have to operate my own webserver I don’t have to maintain proper TLS config It is a static website Github is more secure than most services]]></summary></entry><entry><title type="html">So Long Google, and Thanks for All the Fish</title><link href="https://httpscolonforwardslashforwardslashwwwdotzoltanbalazsdotcom.com/2022/09/16/Google.html" rel="alternate" type="text/html" title="So Long Google, and Thanks for All the Fish" /><published>2022-09-16T13:39:00+00:00</published><updated>2022-09-16T13:39:00+00:00</updated><id>https://httpscolonforwardslashforwardslashwwwdotzoltanbalazsdotcom.com/2022/09/16/Google</id><content type="html" xml:base="https://httpscolonforwardslashforwardslashwwwdotzoltanbalazsdotcom.com/2022/09/16/Google.html"><![CDATA[<h1 id="thx-google-and-youtube-i-got-what-i-paid-for-">Thx, Google and YouTube. I got what I paid for …</h1>

<p>I joined Gmail at the end of 2005. It was not invite-only anymore but still restricted in some countries. It was a novel service compared to my previous one, freemail.hu … if you live in Hungary, you know … 
Anyway, I am still using Gmail as my primary email after 17 years, and I still have not run out of storage. Even though I am paying money for an encrypted email service, searching in that one is pretty bulky, so I only use that one for online shopping, healthcare, and other sensitive topics where I don’t want Google to know everything. 
I uploaded my first hacking-related <a href="https://www.youtube.com/watch?v=lsMK84QOb2M">YouTube video</a> in 2012. 
I wrote <a href="https://jumpespjump.blogspot.com/2013/11/secure-ipv6-deployment-checklist-think.html">my first blog post</a> on Blogger/Blogspot in 2013, when my friend invited me to write some new hacking-related content on his blog. 
As you can see, I was a happy Google user … until I was not.</p>

<p>On February 27, 2021, I got an email from “YouTube team” that my video with the title “IoT hack - IP camera via cloud password brute-force” was removed because it violated the <a href="https://support.google.com/youtube/answer/2801964?hl=en">“Harmful or dangerous content policies”</a>. 
I understand that via keyword-search or quickly looking at the video it got flagged. I disagree with removing the video, as it was about warning of the dangers and did not provide any step-by-step guide or link to hacking codes. But I understand that mistakes happen. What made things worse is that they deleted the video, and I could not access it via YouTube Studio. This is a terrible practice. Please change it.</p>

<p>I felt that appealing would not resolve the issue, so I did the opposite. I emailed them that, “in this case, they should delete all of my videos”. Right after clicking on the send button, I got an instant reply. They “carefully” checked my appeal but will not change their mind. Clearly they did not check the mail.
I also reached out for help on Twitter, and a <a href="https://twitter.com/gynvael/status/1365957884245401602">nice hacker guy</a> working for Google helped me , but unfortunately, the issue was not resolved. 
I moved on. I still do not know what will be the best place to host my educational hacking videos.</p>

<p>On August 21, 2022, I got a mail from the Blogger team. They have unpublished <a href="https://web.archive.org/web/20210517170248/https://jumpespjump.blogspot.com/2020/09/my-whcd-exam-experience.html">one of my posts</a> because it <a href="https://blogger.com/go/contentpolicy">violated their guideline</a>, especially the “Malware and Viruses policy”
Honestly, I don’t know how this blog post could have violated it, as this describes how I passed a blue team-related exam. Yes, the post discussed malware, but not a single piece of code or anything suspicious was published in the blog post. As that would have spoiled the fun … 
The good news is that they did not delete the post, at least.</p>

<h1 id="the-conclusion">The conclusion?</h1>
<p>I think I can’t complain as I was “only” paying with my personal data for Google, so I got what one could expect … But I believe it is time to migrate from Google totally if you want to publish any educational-related hacking material. For the time being, maybe it is time that I start to flag all of their <a href="https://googleprojectzero.blogspot.com/">Project Zero</a> blog posts, as they clearly violate their guidelines … 
And let’s hope Microsoft will not delete the hacking-related blog posts on GitHub pages.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Google]]></summary></entry><entry><title type="html">My WHCD experience</title><link href="https://httpscolonforwardslashforwardslashwwwdotzoltanbalazsdotcom.com/2020/09/10/WHCD.html" rel="alternate" type="text/html" title="My WHCD experience" /><published>2020-09-10T13:53:14+00:00</published><updated>2020-09-10T13:53:14+00:00</updated><id>https://httpscolonforwardslashforwardslashwwwdotzoltanbalazsdotcom.com/2020/09/10/WHCD</id><content type="html" xml:base="https://httpscolonforwardslashforwardslashwwwdotzoltanbalazsdotcom.com/2020/09/10/WHCD.html"><![CDATA[<h1 id="introduction">Introduction</h1>
<p>My story starts in July in Budapest, summer is hot. Way too hot. I am working in the cozy air-conditioned office room and look at my daily schedule. I have a business lunch with Sándor Fehér, co-founder &amp; CEO at White Hat IT Security at an Italian restaurant. This will be a casual meeting, catching up with each other, no preparation needed. I show up at the place, meet Sándor, order a pizza, and we discuss average lunch topics like how APT attackers operate nowadays. He mentions that in September they will organize the exam for their <a href="https://whitehat.eu/whcd">WHCD - White Hat Certified Defender</a> course. And he is happy to provide me a slot for the exam for free. But as nothing is free in life. If I pass - and why would not I? :) - I create a blog post about my view on the exam. I happily accept the invitation and finish the pizza.</p>

<h1 id="preparation">Preparation</h1>
<p>In 2020, the course consisted of 36 hours of training, touching topics like threat intelligence, IoCs, computer forensics, network forensics, all the blue team-related topics. I felt pretty confident that I don’t have to prepare for this exam, even if I did not attend the training and I did zero real forensics investigation in the past eight years.<br />
Before the exam, I received multiple documents on the rules and practical information for the exam. The exam started at 20:00 Friday and ended on 20:00 Sunday. 48 hours for finding 10 flags and provide documentation. Actually, 7 flags are enough to pass the test. The only preparations I made was to buy some energy drinks and sweets. Time is 19:30, so I still have some time to watch the latest Last week tonight before the exam starts.</p>

<h1 id="my-past-experience">My past experience</h1>
<p>I have the following certifications which helped me during the exam: OSCP, OSCE, PSP (Powershell for Penetration Testers). I also have some experience with <a href="https://cujo.com/first-seclounge-ctf-2020-solutions/">CTFs</a>. 8 years ago I did some forensics investigations, but that was a loooong time ago, things changed. A lot.</p>

<h1 id="the-exam---friday">The exam - Friday</h1>
<p>I receive all the IP addresses and credentials to log in to my dedicated Windows AD network, consisting of a workstation, a File Server, and a Domain Controller. I am happy that I have to work with a live system - it is really painful when you work with offline images. I set the goal that today I find at least one flag, have a good night’s sleep and find the remaining 9 on Saturday, and write the documentation on Sunday. Let’s find the easiest task and get the flag quickly … The challenge descriptions are clear, and even the challenge IDs nicely map to MITRE ATT&amp;CK®.<br />
Two hours later I realize I underestimated the difficulty of this exam, and I overestimated my skills. Zero flags found and …</p>

<p><img src="/_img/dog.jpg" alt="image-title-here" class="img-responsive" /></p>

<p>Spoiler alert - I was logging into the workstation with the admin user, and not with the victim. I realized this on Sunday afternoon … This first initial mistake took me at least two hours lost in this initial stage. Anyway, always read through the exam instructions and don’t rush into connecting to the first machine on the provided list. I finally find a sneaky backdoor, analyze it, and submit my first flag. Phew, this is not going to be easy. I go to sleep, but at 5:30 a.m. my brain starts to figure out the challenges even though I am still in my bed, eyes closed. Based on past experience, it does not make sense to try to force myself to sleep, it is better to wake up and <a href="https://www.youtube.com/watch?v=RYnFIRc0k6E">keep rollin’</a>.</p>

<h1 id="saturday">Saturday</h1>
<p>Around 10:00 a.m., I submit another flag. I already spent like seven hours, and I only have two flags. Boy oh boy, this is going to be tough. Time to crack open another energy drink. Hours later I find myself ALT + TAB-bing between the different challenges and making no progress. Time to have a <a href="https://www.youtube.com/watch?v=ncNv1RyGgQk">break</a>. When I am back, I make some good progress. Basic programming skills are really needed to solve multiple challenges. Sometimes I mix up AES keys with IVs but luckily it is OK to fail. Flag after flag. It is evening, and I have 6 flags already \o/. I also found our main suspect, a bird! I was like “let’s find the seventh flag now and I can rest in peace”. Let’s connect the “Rubber duck debugging” and writing the documentation together - maybe I find out what I missed. It is already dark outside, I am tired as hell, but I made good progress with the documentation at least. This tactic turned out to be useful, as I submitted my seventh flag! Finally. I feel like <a href="https://en.wikipedia.org/wiki/Dwayne_Johnson">rock</a> and I can find all the remaining flags on Sunday. GOTO sleep(28800).</p>

<p><img src="/_img/flag.png" alt="image-title-here" class="img-responsive" /></p>

<h1 id="sunday">Sunday</h1>
<p>My brain wakes up again earlier than I want. Let’s finish the documentation and after that focus on the remaining flags. I spend a lot of time on Stackoverflow on how to insert nice syntax-highlighted code into the report (Hello Microsoft, it is 2020, please make it easier for us with builtin tools …) and I also spend more time than I want to admit on how to format the flags in Wordart to make it look nice. Documentation finished, let’s go back to work. While I close all the opened tabs, I finally find the exam instructions, with the credentials to the user’s workspace. “What the fluff, how could I overlook this?”. <a href="https://www.youtube.com/watch?v=HXQUWmXzPeM">MMMKay</a>, let’s log in. Run a bunch of tools. Run even more tools. Let’s dig up emails from 2009 for a German forensics tool I don’t remember the name anymore. But this whole exam is less about tools and more about perseverance and thoroughness. Time flies fast, no progress. Let’s have a break, and <a href="https://www.youtube.com/watch?v=7I68_BdAQmw">kill Sigrun, the Valkyrie Queen in God of War</a>. When I got back, no new flags submitted themselves. Let’s listen to a <a href="https://www.youtube.com/watch?v=fPslvBVqJp8&amp;list=PLz6hefdTd2T5SThoTI0TD-WzwzBVUdj08">CTF playlist</a>, maybe that helps. Well, no, it does not. Let’s download <del>malware</del> <a href="https://github.com/gentilkiwi/mimikatz/releases">information collector software</a> to the workstation and run that for clues. Pro tip: never do this on a live forensics investigation ;)</p>

<p><img src="/_img/bear.jpg" alt="image-title-here" class="img-responsive" /></p>

<p>It’s at 6 o’clock in the evening and I am getting really tired. And the fact that I already have enough flags to pass the exam makes me lazy. I close my eyes and all I can see is obfuscated code flickering. I literally made zero progress on Sunday on the remaining flags. Maybe if the passing limit was 8 flags, I would have tried harder®? We will never know.</p>

<h1 id="monday">Monday</h1>

<p><img src="/_img/cat.gif" alt="image-title-here" class="img-responsive" /></p>

<h1 id="conclusion">Conclusion</h1>
<p>The whole exam experience was perfect. Access to the machines was fast and responsive. I did not experience any technical glitch. All the challenges and the whole story is very challenging but possible to solve. I would say that high-end financially motivated attackers could attack any corporation the same way, and basic detection or forensics would miss most clues. The whole scenario is 100% realistic. Most attacks/techniques are sneaky. The only thing I missed is that on the official exam Discord, they should create a #rage or #random or #memes channel where you can send all your frustration during the exam.</p>

<p>Lesson l: Never underestimate an exam just because it is not known. 
Lesson 2: Never overestimate the knowledge and skills you did not practice for a long time. 
Lesson 3: This WHCD exam provided me the same - or even better experience than I had at Offensive exams like OSCP or OSCE. 
If someone passes this challenge, it is really true that the person really knows how to technically deal with computer incidents. I vision great success for this certification because as of today, there are not many hands-on practical defender exams available on the market. 
I would like to thank Sándor Fehér for this opportunity and to János Pallagi for his support during the weekend and to share some thoughts with me after the exam.</p>

<p><img src="/_img/whcd.png" alt="image-title-here" class="img-responsive" /></p>]]></content><author><name></name></author><summary type="html"><![CDATA[WHCD exam]]></summary></entry><entry><title type="html">The RastaLabs experience</title><link href="https://httpscolonforwardslashforwardslashwwwdotzoltanbalazsdotcom.com/ad/security/hackthebox/mimikatz/pentest/rastalabs/redteam/2020/01/16/The-RastaLabs-experience.html" rel="alternate" type="text/html" title="The RastaLabs experience" /><published>2020-01-16T15:23:43+00:00</published><updated>2020-01-16T15:23:43+00:00</updated><id>https://httpscolonforwardslashforwardslashwwwdotzoltanbalazsdotcom.com/ad/security/hackthebox/mimikatz/pentest/rastalabs/redteam/2020/01/16/The-RastaLabs-experience</id><content type="html" xml:base="https://httpscolonforwardslashforwardslashwwwdotzoltanbalazsdotcom.com/ad/security/hackthebox/mimikatz/pentest/rastalabs/redteam/2020/01/16/The-RastaLabs-experience.html"><![CDATA[<div dir="ltr" style="" trbidi="on"><h2 style="text-align: justify;">Introduction</h2><div style=""><br /></div><div style="">It was 20 November, and I was just starting to wonder what I would do during the next month. I had already left my previous job, and the new one would only start in January. Playing with PS4 all month might sound fun for some people, but I knew I would get bored quickly.</div><div style=""><br /></div><div style="">Even though I have some limited red teaming experience, I always felt that I wanted to explore the excitement of getting Domain Admin – again. I got my first DA in ˜2010 using pass-the-hash, but that was a loooong time ago, and things change quickly.</div><div style="">While reading the backlogs of one of the many Slack rooms, I noticed that certain chat rooms were praising RastaLabs. Looking at the lab description, I felt "this is it, this is exactly what I need." How hard could it be, I have a whole month ahead of me, surely I will finish it before Christmas. Boy, was I wrong.</div><div style=""><br /></div><div class="separator" style=""><a href="https://z6543.github.io/_img/giphy.gif" src="https://z6543.github.io/_img/giphy.gif" style="margin-left: 1em; margin-right: 1em;"><img border="0" data-original-height="365" data-original-width="500" height="" src="https://z6543.github.io/_img/giphy.gif" width="320" /></a></div><div style=""><br /></div><div style=""><br /></div><div style="">The one-time fee of starting the lab is 90 GBP which includes the first month, then every additional month costs 20 GBP. I felt like I was stealing money from Rastamouse and Hackthebox... How can it be so cheap? Sometimes cheap indicates low quality, but not in this case.</div><div style=""><br /></div><div class="separator" style=""><a href="https://z6543.github.io/_img/tenor2B252812529.gif" src="https://z6543.github.io/_img/tenor2B252812529.gif" style="margin-left: 1em; margin-right: 1em;"><img border="0" data-original-height="368" data-original-width="498" height="" src="https://z6543.github.io/_img/tenor2B252812529.gif" width="320" /></a></div><div style=""><br /></div><div style=""><br /></div><h2 style="text-align: justify;">My experience</h2><div><br /></div><div style="">Regarding my previous experience, I already took OSCP, OSCE, SLAE (Securitytube Linux Assembly Expert), and PSP (Powershell for Pentesters), all of which helped me a lot during the lab. I also had some limited red teaming experience. I had more-than-average experience with AV evasion, and I already had experience with the new post-exploit frameworks like Covenant and Powershell Empire. As for writing exploits, I knew how a buffer overflow or a format string attack worked, but I lacked practice in bypassing ASLR and NX. I basically had zero experience with Mimikatz on Windows 10. I used Mimikatz back in 2012, but probably not since. I also had a lot of knowledge on how to do X and Y, on useful tools and hot techniques, but I lacked recent experience with them. Finally, I am usually the last when it comes to speed in hacking, but I have always balanced my lack of speed with perseverance.</div><div style=""><br /></div><h2 style="text-align: justify;">RastaLabs starts in 3,2,1 ...</h2><div style=""><br /></div><div style="">So I paid the initial entry fee, got the VPN connection pack, connected to the lab, and got my first flag after ... 4 days. And there were 17 of them in total. This was the first time I started to worry. I did everything to keep myself on the wrong track, stupid things like assuming incorrect lab network addresses, scanning too few machines, finding the incorrect breadcrumbs via OSINT, trying to exploit a patched web service (as most OSCPers would do), etc. I was also continually struggling with the tools I was using, as I never knew whether they were buggy, or I was misusing them, or this is just not the way to get the flag. I am sure someone with luck and experience could have done this stage in 2-3 hours, but hey, I was there to gain experience.</div><div style=""><br /></div><div style="">During the lab, whenever I got stuck with the same problem for more than 30-40 hours and my frustration was running high, I pinged Rastamouse on the official RastaLabs support channel on <a href="https://mm.netsecfocus.com/">https://mm.netsecfocus.com/</a>. I usually approached him like "Hi, I tried X, Y, and Z but no luck", then he replied "yeah, try Y harder". This kind of information was usually all I needed, and 2-3 hours later I was back on track again. His help was always enough, but never too much to spoil the fun. The availability and professionalism of Rastamouse was 10/10. Huge multi-billion dollar companies fail to provide good enough support, this one guy here was always there to help. Amazing. I highly recommend joining the Mattermost channel – it will help you a lot to see that you are not the only one stuck with problems. But please do not DM him or the channel if you have not already tried harder.</div><div style=""><br /></div><div style="">What's really lovely in the lab is that you can expect real-world scenarios with "RastaLabs employees" working on their computer, reading emails, browsing the web, etc. I believe it is not a spoiler here that at some point in time you have to deliver malware that evades the MS Defender AV on the machine. Yes, there is a real working Defender on the machines, and although it is a bit out of date, it might catch your default payload very quickly. As I previously mentioned, luckily I had recent experience with AV evasion, so this part was not new to me. I highly recommend setting up your own Win10 with the latest Defender updates and testing your payload on it first. If it works there, it will work in the lab. This part can be especially frustrating, because the only feedback you get from the lab is that nothing is happening, and there is no way to debug it. Test your solution locally first.</div><div style=""><br /></div><div style="">Powershell Empire turned out to be an excellent solution for me, the only functionality it lacked was Port Forwarding. But you can drop other tools to do this job efficiently.</div><div style=""><br /></div><div style="">A little help: even if you manage to deliver your payload and you have a working C&amp;C, it does not mean your task with AV evasion is over. It is highly probable that Defender will block your post-exploit codes. To bypass this, read all the blog posts from Rastamouse about AMSI bypass. This is important.</div><div style=""><br /></div><h2 style="text-align: justify;">Lateral movement</h2><div style=""><br /></div><div style="">When you finally get your first shell back ...</div><div style=""><br /></div><div class="separator" style=""><a href="https://z6543.github.io/_img/Popped2Ba2BShell2B-2BImgur.gif" src="https://z6543.github.io/_img/Popped2Ba2BShell2B-2BImgur.gif" style="margin-left: 1em; margin-right: 1em;"><img border="0" data-original-height="198" data-original-width="250" height="" src="https://z6543.github.io/_img/Popped2Ba2BShell2B-2BImgur.gif" /></a></div><div style=""><br /></div><div style=""><br /></div><div style="">A whole new world starts. From now on, you will spend significant time on password cracking, lateral movement, persistence, and figuring out how Windows AD works.</div><div style="">In the past, I played a lot of CTF, and from time to time I got the feeling "yeah, even though this challenge was fun, it was not realistic". This never happened during RastaLabs. All the challenges and solutions were 100% realistic, and as the "Ars poetica" of RastaLabs states:</div><div style=""><br /><div class="separator" style=""></div><div class="separator" style=""><a href="https://z6543.github.io/_img/Screen2BShot2B2020-01-162Bat2B17.21.38.png" imageanchor="1" src="https://z6543.github.io/_img/Screen2BShot2B2020-01-162Bat2B17.21.38.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" data-original-height="724" data-original-width="1330" height="" src="https://z6543.github.io/_img/Screen2BShot2B2020-01-162Bat2B17.21.38.png" width="400" /></a></div><br /></div><div class="separator" style=""></div><div style=""><br /></div><div style="">...which is sooooo true. None of the tasks involve any exploit of any CVE. You need a different mindset for this lab. You need to think about misconfigurations, crackable passwords, privilege abuse, and similar issues. But I believe this lab is still harder to own than 90% of the organizations out there. The only help is that there are no blue-teamers killing our shells.</div><div style=""><br /></div><div style="">About the architecture of the lab: When connecting to the lab with VPN, you basically found yourself in a network you might label as "Internet", with your target network being behind a firewall, just as a proper corporate network should be.</div><div class="separator" style=""><a href="https://z6543.github.io/_img/Screen2BShot2B2020-01-122Bat2B16.16.21.png" src="https://z6543.github.io/_img/Screen2BShot2B2020-01-122Bat2B16.16.21.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" data-original-height="777" data-original-width="1600" height="" src="https://z6543.github.io/_img/Screen2BShot2B2020-01-122Bat2B16.16.21.png" width="640" /></a></div><div style="">There are a bunch of workstations – Win10 only, and some servers like fileserver, exchange, DC, SQL server, etc. The majority of servers are Windows Server 2016, and there is one Linux server. The two sites are adequately separated and firewalled.</div><div style=""><br /></div><div style="">As time passed, I was getting more and more flags, and I started to feel the power. Then the rollercoaster experience started. I was useless, I knew nothing. Getting the flag, I was god. One hour later, I was useless.</div><div style=""><br /></div><div class="separator" style=""><a href="https://z6543.github.io/_img/tenor.gif" src="https://z6543.github.io/_img/tenor.gif" style="margin-left: 1em; margin-right: 1em;"><img border="0" data-original-height="178" data-original-width="250" height="" src="https://z6543.github.io/_img/tenor.gif" /></a></div><div style=""><br /></div><div style=""><br /></div><div style="">For example, I spent a significant amount of time trying to get GUI access to the workstations. In the end, I managed to get that, just to find out I did not achieve anything with it. For unknown reasons, none of the frameworks I tried had a working VNC, so I set up my own, and it was pain.</div><div style=""><br /></div><div style="">On December 18, I finally got Domain Admin privileges. So my estimation to "finish the lab" in one month was not that far off. Except that I was far from finishing it, as I still had to find five other flags I was missing. You might ask "you already have DA, how hard could it be to find the remaining five?". Spoiler alert, it was hard. Or to be more precise, not hard, just challenging, and time-consuming. This was also a time when connections on Mattermost RastaLabs channel helped me a lot. Hints like "flag X is on machine Y" helped me keep motivated, yet it did not spoil the fun. Without hints like this, I would not have written this post but would have been stuck with multiple flags.</div><div style=""><br /></div><h2 style="text-align: justify;">About exploitation</h2><div style=""><br /></div><div style="">And there was the infamous challenge, "ROP the night away." This was totally different from the other 16. I believe this image explains it all:</div><div style=""><br /></div><div class="separator" style=""><a href="https://z6543.github.io/_img/cc18b3bbe0ceeba8a2992e4826a5300db5170652.jpg" src="https://z6543.github.io/_img/cc18b3bbe0ceeba8a2992e4826a5300db5170652.jpg" style="margin-left: 1em; margin-right: 1em;"><img border="0" data-original-height="192" data-original-width="341" height="" src="https://z6543.github.io/_img/cc18b3bbe0ceeba8a2992e4826a5300db5170652.jpg" width="400" /></a></div><div style=""><br /></div><div style="">If you are not friends with GDB, well, you will have a hard time. If you don't have lots of hands-on experience with NX bypass - a.k.a ROP - like me, you will have a hard time with this challenge. The binary exploit challenges during OSCP and OSCE exams are nowhere near as complex as this one. If you have OSEE, you will be fine. For this challenge, I used GDB-Peda and Python pwntools – check them out in case you are not familiar with them. For me, solving this challenge took about 40 hours. Experienced CTF people could probably solve it in 4 hours or less.</div><div style=""><br /></div><h2 style="text-align: justify;">Conclusion</h2><div style=""><br /></div><div style="">I would not recommend taking this lab for total beginners *. I also do not recommend doing the lab if you only have limited time per day, which is especially true if you are working on your home computer. I probably would have saved hours or even days if I had set up a dedicated server in the cloud for this lab. The issue was that the lab workstations were rebooted every day, which meant that I always lost my shells. "Persistence FTW", you might say, but if your C&amp;C is down when the workstation reboots, you are screwed. "Scheduled tasks FTW", you might say, but unless you have a strict schedule on when you start your computer, you will end up with a bunch of scheduled tasks just to get back the shell whenever you start your computer. Day after day I spent the first hour getting back to where I had been the day before. And I just figured out at the end of the lab why some of my scheduled tasks were not working ...</div><div style=""><br /></div><div style="">I would be really interested to see how much time I spent connected to the lab. Probably it was around 200–250 hours in total, which I believe is more than I spent on OSCP and OSCE combined. But it was totally worth it. I really feel the power now that I learned so many useful things.</div><div style=""><br /></div><div style="">But if you consider that the price of the one-month lab is 20 GBP, it is still a very cheap option to practice your skills. </div><div style="">* It is totally OK to do the lab in 6 months, in case you start as a beginner. That is still just 190 GBP for the months of lab access, and you will gain a lot of experience during this time. You will probably have a hard time reaching the point when you have a working shell, but it is OK. You can find every information on Google, you just need time, patience and willingness to get there.</div><div style=""><br /></div><div style="">Anyway, it is still an option not to aim to "get all the flags". Even just by getting the first two flags, you will gain significant experience in "getting a foothold". But for me, not getting all the flags was never an option.</div><div style=""><br /></div><div class="separator" style=""><a href="https://z6543.github.io/_img/cover8.jpg" src="https://z6543.github.io/_img/cover8.jpg" style="margin-left: 1em; margin-right: 1em;"><img border="0" data-original-height="900" data-original-width="1600" height="" src="https://z6543.github.io/_img/cover8.jpg" width="400" /></a></div><div style=""><br /></div><div style=""><br /></div><div style="">If you are still unconvinced, check these other blog posts:</div><div style=""><a href="https://jmpesp.me/a-rastalabs-story/">https://jmpesp.me/a-rastalabs-story/</a></div><div style=""><a href="https://www.gerrenmurphy.com/rastalabs-review/">https://www.gerrenmurphy.com/rastalabs-review/</a></div><div style=""><br /></div><div style="">Or see what others wrote about RastaLabs.</div><div class="separator" style=""><a href="https://z6543.github.io/_img/Screen2BShot2B2020-01-122Bat2B17.21.11.png" src="https://z6543.github.io/_img/Screen2BShot2B2020-01-122Bat2B17.21.11.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" data-original-height="911" data-original-width="1600" height="" src="https://z6543.github.io/_img/Screen2BShot2B2020-01-122Bat2B17.21.11.png" width="640" /></a></div><div style=""><br /></div><div style=""><br /></div><h2 style="text-align: justify;">Footnote</h2><div style=""><br /></div><div style="">In case you start the lab, please, pretty please, follow the rules, and do not spoil the fun for others. Do not leave your tools around, do not keep shared drives open, do not leave FLAGs around. Leave the machine as it was. If you have to upload a file, put it in a folder others won't easily find. This is a necessary mindset when it comes to real-world red teaming. Don't forget to drop a party parrot into the chat whenever you or someone else gets a new flag. And don't forget:</div><blockquote class="tr_bq" style="text-align: justify;">OSCP has no power here. Cry harder!</blockquote><div style=""><br /></div><div style="">I will probably keep my subscription to the lab and try new things, new post-exploit frameworks. I would like to thank @_rastamouse for this great experience, @superkojiman for the ROP challenge. Hackthebox for hosting the lab with excellent uptime.</div><div style="">As for @gentilkiwi and @harmj0y, these two guys probably advanced red-teaming more than everyone else combined together. pwntools from @gallopsled was also really helpful. And I will be forever grateful to Bradley from finance for his continuous support whenever I lost my shells.</div></div>]]></content><author><name></name></author><category term="ad" /><category term="security" /><category term="hackthebox" /><category term="mimikatz" /><category term="pentest" /><category term="rastalabs" /><category term="redteam" /><summary type="html"><![CDATA[IntroductionIt was 20 November, and I was just starting to wonder what I would do during the next month. I had already left my previous job, and the new one would only start in January. Playing with PS4 all month might sound fun for some people, but I knew I would get bored quickly.Even though I have some limited red teaming experience, I always felt that I wanted to explore the excitement of getting Domain Admin – again. I got my first DA in ˜2010 using pass-the-hash, but that was a loooong time ago, and things change quickly.While reading the backlogs of one of the many Slack rooms, I noticed that certain chat rooms were praising RastaLabs. Looking at the lab description, I felt "this is it, this is exactly what I need." How hard could it be, I have a whole month ahead of me, surely I will finish it before Christmas. Boy, was I wrong.The one-time fee of starting the lab is 90 GBP which includes the first month, then every additional month costs 20 GBP. I felt like I was stealing money from Rastamouse and Hackthebox... How can it be so cheap? Sometimes cheap indicates low quality, but not in this case.My experienceRegarding my previous experience, I already took OSCP, OSCE, SLAE (Securitytube Linux Assembly Expert), and PSP (Powershell for Pentesters), all of which helped me a lot during the lab. I also had some limited red teaming experience. I had more-than-average experience with AV evasion, and I already had experience with the new post-exploit frameworks like Covenant and Powershell Empire. As for writing exploits, I knew how a buffer overflow or a format string attack worked, but I lacked practice in bypassing ASLR and NX. I basically had zero experience with Mimikatz on Windows 10. I used Mimikatz back in 2012, but probably not since. I also had a lot of knowledge on how to do X and Y, on useful tools and hot techniques, but I lacked recent experience with them. Finally, I am usually the last when it comes to speed in hacking, but I have always balanced my lack of speed with perseverance.RastaLabs starts in 3,2,1 ...So I paid the initial entry fee, got the VPN connection pack, connected to the lab, and got my first flag after ... 4 days. And there were 17 of them in total. This was the first time I started to worry. I did everything to keep myself on the wrong track, stupid things like assuming incorrect lab network addresses, scanning too few machines, finding the incorrect breadcrumbs via OSINT, trying to exploit a patched web service (as most OSCPers would do), etc. I was also continually struggling with the tools I was using, as I never knew whether they were buggy, or I was misusing them, or this is just not the way to get the flag. I am sure someone with luck and experience could have done this stage in 2-3 hours, but hey, I was there to gain experience.During the lab, whenever I got stuck with the same problem for more than 30-40 hours and my frustration was running high, I pinged Rastamouse on the official RastaLabs support channel on https://mm.netsecfocus.com/. I usually approached him like "Hi, I tried X, Y, and Z but no luck", then he replied "yeah, try Y harder". This kind of information was usually all I needed, and 2-3 hours later I was back on track again. His help was always enough, but never too much to spoil the fun. The availability and professionalism of Rastamouse was 10/10. Huge multi-billion dollar companies fail to provide good enough support, this one guy here was always there to help. Amazing. I highly recommend joining the Mattermost channel – it will help you a lot to see that you are not the only one stuck with problems. But please do not DM him or the channel if you have not already tried harder.What's really lovely in the lab is that you can expect real-world scenarios with "RastaLabs employees" working on their computer, reading emails, browsing the web, etc. I believe it is not a spoiler here that at some point in time you have to deliver malware that evades the MS Defender AV on the machine. Yes, there is a real working Defender on the machines, and although it is a bit out of date, it might catch your default payload very quickly. As I previously mentioned, luckily I had recent experience with AV evasion, so this part was not new to me. I highly recommend setting up your own Win10 with the latest Defender updates and testing your payload on it first. If it works there, it will work in the lab. This part can be especially frustrating, because the only feedback you get from the lab is that nothing is happening, and there is no way to debug it. Test your solution locally first.Powershell Empire turned out to be an excellent solution for me, the only functionality it lacked was Port Forwarding. But you can drop other tools to do this job efficiently.A little help: even if you manage to deliver your payload and you have a working C&amp;C, it does not mean your task with AV evasion is over. It is highly probable that Defender will block your post-exploit codes. To bypass this, read all the blog posts from Rastamouse about AMSI bypass. This is important.Lateral movementWhen you finally get your first shell back ...A whole new world starts. From now on, you will spend significant time on password cracking, lateral movement, persistence, and figuring out how Windows AD works.In the past, I played a lot of CTF, and from time to time I got the feeling "yeah, even though this challenge was fun, it was not realistic". This never happened during RastaLabs. All the challenges and solutions were 100% realistic, and as the "Ars poetica" of RastaLabs states:...which is sooooo true. None of the tasks involve any exploit of any CVE. You need a different mindset for this lab. You need to think about misconfigurations, crackable passwords, privilege abuse, and similar issues. But I believe this lab is still harder to own than 90% of the organizations out there. The only help is that there are no blue-teamers killing our shells.About the architecture of the lab: When connecting to the lab with VPN, you basically found yourself in a network you might label as "Internet", with your target network being behind a firewall, just as a proper corporate network should be.There are a bunch of workstations – Win10 only, and some servers like fileserver, exchange, DC, SQL server, etc. The majority of servers are Windows Server 2016, and there is one Linux server. The two sites are adequately separated and firewalled.As time passed, I was getting more and more flags, and I started to feel the power. Then the rollercoaster experience started. I was useless, I knew nothing. Getting the flag, I was god. One hour later, I was useless.For example, I spent a significant amount of time trying to get GUI access to the workstations. In the end, I managed to get that, just to find out I did not achieve anything with it. For unknown reasons, none of the frameworks I tried had a working VNC, so I set up my own, and it was pain.On December 18, I finally got Domain Admin privileges. So my estimation to "finish the lab" in one month was not that far off. Except that I was far from finishing it, as I still had to find five other flags I was missing. You might ask "you already have DA, how hard could it be to find the remaining five?". Spoiler alert, it was hard. Or to be more precise, not hard, just challenging, and time-consuming. This was also a time when connections on Mattermost RastaLabs channel helped me a lot. Hints like "flag X is on machine Y" helped me keep motivated, yet it did not spoil the fun. Without hints like this, I would not have written this post but would have been stuck with multiple flags.About exploitationAnd there was the infamous challenge, "ROP the night away." This was totally different from the other 16. I believe this image explains it all:If you are not friends with GDB, well, you will have a hard time. If you don't have lots of hands-on experience with NX bypass - a.k.a ROP - like me, you will have a hard time with this challenge. The binary exploit challenges during OSCP and OSCE exams are nowhere near as complex as this one. If you have OSEE, you will be fine. For this challenge, I used GDB-Peda and Python pwntools – check them out in case you are not familiar with them. For me, solving this challenge took about 40 hours. Experienced CTF people could probably solve it in 4 hours or less.ConclusionI would not recommend taking this lab for total beginners *. I also do not recommend doing the lab if you only have limited time per day, which is especially true if you are working on your home computer. I probably would have saved hours or even days if I had set up a dedicated server in the cloud for this lab. The issue was that the lab workstations were rebooted every day, which meant that I always lost my shells. "Persistence FTW", you might say, but if your C&amp;C is down when the workstation reboots, you are screwed. "Scheduled tasks FTW", you might say, but unless you have a strict schedule on when you start your computer, you will end up with a bunch of scheduled tasks just to get back the shell whenever you start your computer. Day after day I spent the first hour getting back to where I had been the day before. And I just figured out at the end of the lab why some of my scheduled tasks were not working ...I would be really interested to see how much time I spent connected to the lab. Probably it was around 200–250 hours in total, which I believe is more than I spent on OSCP and OSCE combined. But it was totally worth it. I really feel the power now that I learned so many useful things.But if you consider that the price of the one-month lab is 20 GBP, it is still a very cheap option to practice your skills. * It is totally OK to do the lab in 6 months, in case you start as a beginner. That is still just 190 GBP for the months of lab access, and you will gain a lot of experience during this time. You will probably have a hard time reaching the point when you have a working shell, but it is OK. You can find every information on Google, you just need time, patience and willingness to get there.Anyway, it is still an option not to aim to "get all the flags". Even just by getting the first two flags, you will gain significant experience in "getting a foothold". But for me, not getting all the flags was never an option.If you are still unconvinced, check these other blog posts:https://jmpesp.me/a-rastalabs-story/https://www.gerrenmurphy.com/rastalabs-review/Or see what others wrote about RastaLabs.FootnoteIn case you start the lab, please, pretty please, follow the rules, and do not spoil the fun for others. Do not leave your tools around, do not keep shared drives open, do not leave FLAGs around. Leave the machine as it was. If you have to upload a file, put it in a folder others won't easily find. This is a necessary mindset when it comes to real-world red teaming. Don't forget to drop a party parrot into the chat whenever you or someone else gets a new flag. And don't forget:OSCP has no power here. Cry harder!I will probably keep my subscription to the lab and try new things, new post-exploit frameworks. I would like to thank @_rastamouse for this great experience, @superkojiman for the ROP challenge. Hackthebox for hosting the lab with excellent uptime.As for @gentilkiwi and @harmj0y, these two guys probably advanced red-teaming more than everyone else combined together. pwntools from @gallopsled was also really helpful. And I will be forever grateful to Bradley from finance for his continuous support whenever I lost my shells.]]></summary></entry><entry><title type="html">Hacktivity 2018 badge - quick start guide for beginners</title><link href="https://httpscolonforwardslashforwardslashwwwdotzoltanbalazsdotcom.com/badge/hacking/hacktivity/hw/2019/09/19/Hacktivity-2018-badge-quick-start-guide-for-beginners.html" rel="alternate" type="text/html" title="Hacktivity 2018 badge - quick start guide for beginners" /><published>2019-09-19T15:57:50+00:00</published><updated>2019-09-19T15:57:50+00:00</updated><id>https://httpscolonforwardslashforwardslashwwwdotzoltanbalazsdotcom.com/badge/hacking/hacktivity/hw/2019/09/19/Hacktivity-2018-badge---quick-start-guide-for-beginners</id><content type="html" xml:base="https://httpscolonforwardslashforwardslashwwwdotzoltanbalazsdotcom.com/badge/hacking/hacktivity/hw/2019/09/19/Hacktivity-2018-badge-quick-start-guide-for-beginners.html"><![CDATA[<div>You either landed on this blog post because </div>
<div></div>
<ul><li>you are a huge fan of Hacktivity</li><li>you bought this badge around a year ago</li><li>you are just interested in hacker conference badge hacking. </li></ul>
<div>or maybe all of the above. Whatever the reasons, this guide should be helpful for those who never had any real-life experience with these little gadgets. </div>
<div>But first things first, here is a list what you need for hacking the badge:</div>
<div></div>
<ul><li>a computer with USB port and macOS, Linux or Windows. You can use other OS as well, but this guide covers these</li><li>USB mini cable to connect the badge to the computer</li><li>the Hacktivity badge from 2018</li></ul>
<div>By default, this is how your badge looks like.</div>
<p><img src="https://z6543.github.io/_img/IMG_8640.JPG" /></p>
<h2>Let's get started</h2>
<p>Luckily, you don’t need any soldering skills for the first steps. Just connect the USB mini port to the bottom left connector on the badge, connect the other part of the USB cable to your computer, and within some seconds you will be able to see that the lights on your badge are blinking. So far so good. Now, depending on which OS you use, you should choose your destiny here.</p>
<h3>Linux</h3>
<p>The best source of information about a new device being connected is</p>
<h1 id="dmesg">dmesg</h1>
<p>The tail of the output should look like</p>
<pre>[267300.206966] usb 2-2.2: new full-speed USB device number 14 using uhci_hcd
[267300.326484] usb 2-2.2: New USB device found, idVendor=0403, idProduct=6001
[267300.326486] usb 2-2.2: New USB device strings: Mfr=1, Product=2, SerialNumber=3
[267300.326487] usb 2-2.2: Product: FT232R USB UART
[267300.326488] usb 2-2.2: Manufacturer: FTDI
[267300.326489] usb 2-2.2: SerialNumber: <b>AC01U4XN</b>
[267300.558684] usbcore: registered new interface driver usbserial_generic
[267300.558692] usbserial: USB Serial support registered for generic
[267300.639673] usbcore: registered new interface driver ftdi_sio
[267300.639684] usbserial: USB Serial support registered for FTDI USB Serial Device
[267300.639713] ftdi_sio 2-2.2:1.0: FTDI USB Serial Device converter detected
[267300.639741] usb 2-2.2: Detected FT232RL
[267300.643235] usb 2-2.2: FTDI USB Serial Device converter now attached to <b>ttyUSB0</b></pre>
<div style=""><br />Dmesg is pretty kind to us, as it even notifies us that the device is now attached to ttyUSB0. 
From now on, connecting to the device is exactly the same as it is in the macOS section, so please find the "Linux users, read it from here" section below. </div>
<h3>macOS</h3>
<div>There are multiple commands you can type into Terminal to get an idea about what you are looking at. One command is:</div>
<div> </div>
<div><pre># ioreg -p IOUSB -w0 -l</pre></div>
<div><br /></div>
<div>With this command, you should get output similar to this:</div>
<div> <br /><pre>+-o FT232R USB UART@14100000  &lt;class AppleUSBDevice, id 0x100005465, registered, matched, active, busy 0 (712 ms), retain 20&gt;<br />    |   {<br />    |     "sessionID" = 71217335583342<br />    |     "iManufacturer" = 1<br />    |     "bNumConfigurations" = 1<br />    |     "idProduct" = 24577<br />    |     "bcdDevice" = 1536<br />    |     "Bus Power Available" = 250<br />    |     "USB Address" = 2<br />    |     "bMaxPacketSize0" = 8<br />    |     "iProduct" = 2<br />    |     "iSerialNumber" = 3<br />    |     "bDeviceClass" = 0<br />    |     "Built-In" = No<br />    |     "locationID" = 336592896<br />    |     "bDeviceSubClass" = 0<br />    |     "bcdUSB" = 512<br />    |     "USB Product Name" = "FT232R USB UART"<br />    |     "PortNum" = 1<br />    |     "non-removable" = "no"<br />    |     "IOCFPlugInTypes" = {"9dc7b780-9ec0-11d4-a54f-000a27052861"="IOUSBFamily.kext/Contents/PlugIns/IOUSBLib.bundle"}<br />    |     "bDeviceProtocol" = 0<br />    |     "IOUserClientClass" = "IOUSBDeviceUserClientV2"<br />    |     "IOPowerManagement" = {"DevicePowerState"=0,"CurrentPowerState"=3,"CapabilityFlags"=65536,"MaxPowerState"=4,"DriverPowerState"=3}<br />    |     "kUSBCurrentConfiguration" = 1<br />    |     "Device Speed" = 1<br />    |     "USB Vendor Name" = "FTDI"<br />    |     "idVendor" = 1027<br />    |     "IOGeneralInterest" = "IOCommand is not serializable"<br />    |     "USB Serial Number" = "<b>AC01U4XN</b>"<br />    |     "IOClassNameOverride" = "IOUSBDevice"<br />    |   } <br /></pre>The most important information you get is the USB serial number - AC01U4XN in my case.<br />Another way to get this information is<br /><pre># system_profiler SPUSBDataType<br /><br /></pre>which will give back something similar to:<br /><pre>FT232R USB UART:<br /><br />          Product ID: 0x6001<br />          Vendor ID: 0x0403  (Future Technology Devices International Limited)<br />          Version: 6.00<br />          Serial Number: <b>AC01U4XN</b><br />          Speed: Up to 12 Mb/sec<br />          Manufacturer: FTDI<br />          Location ID: 0x14100000 / 2<br />          Current Available (mA): 500<br />          Current Required (mA): 90<br />          Extra Operating Current (mA): 0<br /></pre><div><br /></div><div>The serial number you got is the same.<br /><br />What you are trying to achieve here is to connect to the device, but in order to connect to it, you have to know where the device in the /dev folder is mapped to. A quick and dirty solution is to list all devices under /dev when the device is disconnected, once when it is connected, and diff the outputs. For example, the following should do the job:<br /><br /><pre>ls -lha /dev/tty* &gt; plugged.txt<br />ls -lha /dev/tty* &gt; np.txt<br />vimdiff plugged.txt np.txt<br /></pre><br />The result should be obvious, /dev/tty.usbserial-AC01U4XN is the new device in case macOS. In the case of Linux, it was /dev/ttyUSB0.<br /><h4>Linux users, read it from here. macOS users, please continue reading</h4>Now you can use either the built-in screen command or minicom to get data out from the badge. Usually, you need three information in order to communicate with a badge. Path on /dev (you already got that), speed in baud, and the async config parameters. Either you can guess the speed or you can Google that for the specific device. Standard baud rates include 110, 300, 600, 1200, 2400, 4800, 9600, 14400, 19200, 38400, 57600, 115200, 128000 and 256000 bits per second. I usually found 1200, 9600 and 115200 a common choice, but that is just me.<br />Regarding the async config parameters, the default is that <b>8</b> bits are used, there is <b>n</b>o parity bit, and <b>1</b> stop bit is used. The short abbreviation for this is 8n1. In the next example, you will use the screen command. By default, it uses 8n1, but it is called cs8 to confuse the beginners.<br /><br />If you type:<br /># screen /dev/tty.usbserial-AC01U4XN 9600<br />or<br /># screen /dev/ttyUSB0 9600<br />and wait for minutes and nothing happens, it is because the badge already tried to communicate via the USB port, but no-one was listening there. Disconnect the badge from the computer, connect again, and type the screen command above to connect. If you are quick enough you can see that the amber LED will stop blinking and your screen command is greeted with some interesting information. By quick enough I mean ˜90 seconds, as it takes the device 1.5 minutes to boot the OS and the CTF app.<br /><h3>Windows</h3><div>When you connect the device to Windows, you will be greeted with a pop-up.</div><div><a href="https://z6543.github.io/_img/Screen2BShot2B2019-09-162Bat2B17.52.32.png" src="https://z6543.github.io/_img/Screen2BShot2B2019-09-162Bat2B17.52.32.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" data-original-height="124" data-original-width="488" height="" src="https://z6543.github.io/_img/Screen2BShot2B2019-09-162Bat2B17.52.32.png" width="400" /></a></div><div><br /></div><div>Just click on the popup and you will see the COM port number the device is connected to:</div><br /><div><a href="https://z6543.github.io/_img/Screen2BShot2B2019-09-162Bat2B17.52.55.png" src="https://z6543.github.io/_img/Screen2BShot2B2019-09-162Bat2B17.52.55.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" data-original-height="269" data-original-width="663" height="" src="https://z6543.github.io/_img/Screen2BShot2B2019-09-162Bat2B17.52.55.png" width="400" /></a></div><div><br /></div><div>In this case, it is connected to COM3. So let's fire up our favorite putty.exe, select Serial, choose COM3, add speed 9600, and you are ready to go!</div><br /><div><a href="https://z6543.github.io/_img/Screen2BShot2B2019-09-162Bat2B18.22.04.png" src="https://z6543.github.io/_img/Screen2BShot2B2019-09-162Bat2B18.22.04.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" data-original-height="308" data-original-width="710" height="" src="https://z6543.github.io/_img/Screen2BShot2B2019-09-162Bat2B18.22.04.png" width="400" /></a></div><br />You might check the end of the macOS section in case you can't see anything. Timing is everything.<br /><br /><h2>The CTF</h2><pre>Welcome to the Hacktivity 2018 badge challenge!<br /><br />This challenge consists of several tasks with one or more levels of<br />difficulty. They are all connected in some way or another to HW RE<br />and there's no competition, the whole purpose is to learn things.<br /><br />Note: we recommend turning on local echo in your terminal!<br />Also, feel free to ask for hints at the Hackcenter!<br /><br />Choose your destiny below:<br /><br />  1. Visual HW debugging<br />  2. Reverse engineering<br />  3. RF hacking<br />  4. Crypto protection<br /><br />Enter the number of the challenge you're interested in and press [<br /></pre></div>Excellent, now you are ready to hack this! In case you are lost in controlling the screen command, go to <a href="https://linuxize.com/post/how-to-use-linux-screen/">https://linuxize.com/post/how-to-use-linux-screen/</a>.<br /><br />I will not spoil any fun in giving out the challenge solutions here. It is still your task to find solutions for these.<br /><br />But here is a catch. You can get a root shell on the device. And it is pretty straightforward. Just carefully remove the Omega shield from the badge. Now you see two jumpers; by default, these are connected together as UART1. As seen below.<br /></div>
<div><a href="https://z6543.github.io/_img/IMG_8641.JPG" src="https://z6543.github.io/_img/IMG_8641.JPG" style="margin-left: 1em; margin-right: 1em;"><img src="https://z6543.github.io/_img/IMG_8641.JPG" /></a></div>
<div><br /></div>
<div><br /></div>
<div>But what happens if you move these jumpers to UART0? Guess what, you can get a root shell! This is what I call privilege escalation on the HW level :) But first, let's connect the Omega shield back. Also, for added fun, this new interface speaks on 115200 baud, so you should change your screen parameters to 115200. Also, the new interface has a different ID under /dev, but I am sure you can figure this out from now on.</div>
<div><br /></div>
<div><br /></div>
<div><img border="0" src="https://z6543.github.io/_img/IMG_8642.JPG" /></div>
<div><br /></div>
<div><span style="text-align: justify;"><br /></span></div>
<div><span style="text-align: justify;">If you connect to the device during boot time, you can see a lot of exciting debug information about the device. And after it boots, you just get a root prompt. Woohoo! </span></div>
<div><span style="text-align: justify;">But what can you do with this root access? Well, for starters, how about running </span></div>
<div><span style="text-align: justify;"># strings hello | less</span></div>
<div><span style="text-align: justify;"><br /></span></div>
<div><span style="text-align: justify;">From now on, you are on your own to hack this badge. Happy hacking.</span></div>
<div><span style="text-align: justify;">Big thanks to <a href="https://twitter.com/0xmaro" target="_blank">Attila Marosi-Bauer</a> and <a href="https://hsbp.org/HomePage" target="_blank">Hackerspace Budapest</a> for developing this badge and the contests.</span></div>
<div><span style="text-align: justify;"><br /></span></div>
<div><span style="text-align: justify;">PS: In case you want to use the radio functionality of the badge, see below how you should solder the parts to it. By default, you can process slow speed radio frequency signals on GPIO19. But for higher transfer speeds, you should wire the RF module DATA OUT pin with the RX1 free together.</span></div>
<div><span style="text-align: justify;"><br /></span></div>
<div><a href="https://z6543.github.io/_img/IMG_8638.JPG" src="https://z6543.github.io/_img/IMG_8638.JPG" style="margin-left: 1em; margin-right: 1em;"><img border="0" data-original-height="1600" data-original-width="1200" height="" src="https://z6543.github.io/_img/IMG_8638.JPG" width="300" /></a><br /><br /></div>]]></content><author><name></name></author><category term="badge" /><category term="hacking" /><category term="hacktivity" /><category term="HW" /><summary type="html"><![CDATA[You either landed on this blog post because  you are a huge fan of Hacktivityyou bought this badge around a year agoyou are just interested in hacker conference badge hacking.  or maybe all of the above. Whatever the reasons, this guide should be helpful for those who never had any real-life experience with these little gadgets.  But first things first, here is a list what you need for hacking the badge: a computer with USB port and macOS, Linux or Windows. You can use other OS as well, but this guide covers theseUSB mini cable to connect the badge to the computerthe Hacktivity badge from 2018 By default, this is how your badge looks like. Let's get started Luckily, you don’t need any soldering skills for the first steps. Just connect the USB mini port to the bottom left connector on the badge, connect the other part of the USB cable to your computer, and within some seconds you will be able to see that the lights on your badge are blinking. So far so good. Now, depending on which OS you use, you should choose your destiny here. Linux The best source of information about a new device being connected is dmesg The tail of the output should look like [267300.206966] usb 2-2.2: new full-speed USB device number 14 using uhci_hcd [267300.326484] usb 2-2.2: New USB device found, idVendor=0403, idProduct=6001 [267300.326486] usb 2-2.2: New USB device strings: Mfr=1, Product=2, SerialNumber=3 [267300.326487] usb 2-2.2: Product: FT232R USB UART [267300.326488] usb 2-2.2: Manufacturer: FTDI [267300.326489] usb 2-2.2: SerialNumber: AC01U4XN [267300.558684] usbcore: registered new interface driver usbserial_generic [267300.558692] usbserial: USB Serial support registered for generic [267300.639673] usbcore: registered new interface driver ftdi_sio [267300.639684] usbserial: USB Serial support registered for FTDI USB Serial Device [267300.639713] ftdi_sio 2-2.2:1.0: FTDI USB Serial Device converter detected [267300.639741] usb 2-2.2: Detected FT232RL [267300.643235] usb 2-2.2: FTDI USB Serial Device converter now attached to ttyUSB0 Dmesg is pretty kind to us, as it even notifies us that the device is now attached to ttyUSB0.  From now on, connecting to the device is exactly the same as it is in the macOS section, so please find the "Linux users, read it from here" section below.  macOS There are multiple commands you can type into Terminal to get an idea about what you are looking at. One command is: # ioreg -p IOUSB -w0 -l With this command, you should get output similar to this: +-o FT232R USB UART@14100000  &lt;class AppleUSBDevice, id 0x100005465, registered, matched, active, busy 0 (712 ms), retain 20&gt;    |   {    |     "sessionID" = 71217335583342    |     "iManufacturer" = 1    |     "bNumConfigurations" = 1    |     "idProduct" = 24577    |     "bcdDevice" = 1536    |     "Bus Power Available" = 250    |     "USB Address" = 2    |     "bMaxPacketSize0" = 8    |     "iProduct" = 2    |     "iSerialNumber" = 3    |     "bDeviceClass" = 0    |     "Built-In" = No    |     "locationID" = 336592896    |     "bDeviceSubClass" = 0    |     "bcdUSB" = 512    |     "USB Product Name" = "FT232R USB UART"    |     "PortNum" = 1    |     "non-removable" = "no"    |     "IOCFPlugInTypes" = {"9dc7b780-9ec0-11d4-a54f-000a27052861"="IOUSBFamily.kext/Contents/PlugIns/IOUSBLib.bundle"}    |     "bDeviceProtocol" = 0    |     "IOUserClientClass" = "IOUSBDeviceUserClientV2"    |     "IOPowerManagement" = {"DevicePowerState"=0,"CurrentPowerState"=3,"CapabilityFlags"=65536,"MaxPowerState"=4,"DriverPowerState"=3}    |     "kUSBCurrentConfiguration" = 1    |     "Device Speed" = 1    |     "USB Vendor Name" = "FTDI"    |     "idVendor" = 1027    |     "IOGeneralInterest" = "IOCommand is not serializable"    |     "USB Serial Number" = "AC01U4XN"    |     "IOClassNameOverride" = "IOUSBDevice"    |   } The most important information you get is the USB serial number - AC01U4XN in my case.Another way to get this information is# system_profiler SPUSBDataTypewhich will give back something similar to:FT232R USB UART:          Product ID: 0x6001          Vendor ID: 0x0403  (Future Technology Devices International Limited)          Version: 6.00          Serial Number: AC01U4XN          Speed: Up to 12 Mb/sec          Manufacturer: FTDI          Location ID: 0x14100000 / 2          Current Available (mA): 500          Current Required (mA): 90          Extra Operating Current (mA): 0The serial number you got is the same.What you are trying to achieve here is to connect to the device, but in order to connect to it, you have to know where the device in the /dev folder is mapped to. A quick and dirty solution is to list all devices under /dev when the device is disconnected, once when it is connected, and diff the outputs. For example, the following should do the job:ls -lha /dev/tty* &gt; plugged.txtls -lha /dev/tty* &gt; np.txtvimdiff plugged.txt np.txtThe result should be obvious, /dev/tty.usbserial-AC01U4XN is the new device in case macOS. In the case of Linux, it was /dev/ttyUSB0.Linux users, read it from here. macOS users, please continue readingNow you can use either the built-in screen command or minicom to get data out from the badge. Usually, you need three information in order to communicate with a badge. Path on /dev (you already got that), speed in baud, and the async config parameters. Either you can guess the speed or you can Google that for the specific device. Standard baud rates include 110, 300, 600, 1200, 2400, 4800, 9600, 14400, 19200, 38400, 57600, 115200, 128000 and 256000 bits per second. I usually found 1200, 9600 and 115200 a common choice, but that is just me.Regarding the async config parameters, the default is that 8 bits are used, there is no parity bit, and 1 stop bit is used. The short abbreviation for this is 8n1. In the next example, you will use the screen command. By default, it uses 8n1, but it is called cs8 to confuse the beginners.If you type:# screen /dev/tty.usbserial-AC01U4XN 9600or# screen /dev/ttyUSB0 9600and wait for minutes and nothing happens, it is because the badge already tried to communicate via the USB port, but no-one was listening there. Disconnect the badge from the computer, connect again, and type the screen command above to connect. If you are quick enough you can see that the amber LED will stop blinking and your screen command is greeted with some interesting information. By quick enough I mean ˜90 seconds, as it takes the device 1.5 minutes to boot the OS and the CTF app.WindowsWhen you connect the device to Windows, you will be greeted with a pop-up.Just click on the popup and you will see the COM port number the device is connected to:In this case, it is connected to COM3. So let's fire up our favorite putty.exe, select Serial, choose COM3, add speed 9600, and you are ready to go!You might check the end of the macOS section in case you can't see anything. Timing is everything.The CTFWelcome to the Hacktivity 2018 badge challenge!This challenge consists of several tasks with one or more levels ofdifficulty. They are all connected in some way or another to HW REand there's no competition, the whole purpose is to learn things.Note: we recommend turning on local echo in your terminal!Also, feel free to ask for hints at the Hackcenter!Choose your destiny below: 1. Visual HW debugging 2. Reverse engineering 3. RF hacking 4. Crypto protectionEnter the number of the challenge you're interested in and press [Excellent, now you are ready to hack this! In case you are lost in controlling the screen command, go to https://linuxize.com/post/how-to-use-linux-screen/.I will not spoil any fun in giving out the challenge solutions here. It is still your task to find solutions for these.But here is a catch. You can get a root shell on the device. And it is pretty straightforward. Just carefully remove the Omega shield from the badge. Now you see two jumpers; by default, these are connected together as UART1. As seen below. But what happens if you move these jumpers to UART0? Guess what, you can get a root shell! This is what I call privilege escalation on the HW level :) But first, let's connect the Omega shield back. Also, for added fun, this new interface speaks on 115200 baud, so you should change your screen parameters to 115200. Also, the new interface has a different ID under /dev, but I am sure you can figure this out from now on. If you connect to the device during boot time, you can see a lot of exciting debug information about the device. And after it boots, you just get a root prompt. Woohoo!  But what can you do with this root access? Well, for starters, how about running  # strings hello | less From now on, you are on your own to hack this badge. Happy hacking. Big thanks to Attila Marosi-Bauer and Hackerspace Budapest for developing this badge and the contests. PS: In case you want to use the radio functionality of the badge, see below how you should solder the parts to it. By default, you can process slow speed radio frequency signals on GPIO19. But for higher transfer speeds, you should wire the RF module DATA OUT pin with the RX1 free together.]]></summary></entry><entry><title type="html">Hacking freemium games - the evolution of PC game cheating</title><link href="https://httpscolonforwardslashforwardslashwwwdotzoltanbalazsdotcom.com/cheating/freemium/games/hacking/2019/01/14/Hacking-freemium-games-the-evolution-of-PC-game-cheating.html" rel="alternate" type="text/html" title="Hacking freemium games - the evolution of PC game cheating" /><published>2019-01-14T13:45:26+00:00</published><updated>2019-01-14T13:45:26+00:00</updated><id>https://httpscolonforwardslashforwardslashwwwdotzoltanbalazsdotcom.com/cheating/freemium/games/hacking/2019/01/14/Hacking-freemium-games---the-evolution-of-PC-game-cheating</id><content type="html" xml:base="https://httpscolonforwardslashforwardslashwwwdotzoltanbalazsdotcom.com/cheating/freemium/games/hacking/2019/01/14/Hacking-freemium-games-the-evolution-of-PC-game-cheating.html"><![CDATA[<div style="">This post is going to be a rather strange post compared to previous ones. But bear with me, in the middle of the post you will see why this post fits the IT security topic.</div>
<div style=""><br /></div>
<div style="">I'm also terribly sorry for not posting recently, but I was busy with my <a href="http://www.securitytube-training.com/online-courses/securitytube-python-scripting-expert/" target="_blank">SPSE</a> and <a href="http://www.securitytube-training.com/online-courses/securitytube-linux-assembly-expert/index.html" target="_blank">SLAE</a> certification. Both are recommended for Python and Assembly noobs like me. But back to this post.<br /><br /></div>
<h2 style="text-align: justify;">A little bit of history</h2>
<div style="">Cheating in games started as help for game testers. By using invincibility or infinite ammo testers were able to test the game quicker, which meant less money spent on testing. I personally use cheat codes in games, depending on my mood. Sometimes it feels good to slash all the opponents while I'm invincible, sometimes it is more fun to play the game without cheats. One can argue whether cheating in games is OK or not, but I believe it depends, there is no black or white. But one thing is for sure, it is part of the gaming industry. There is huge demand for cheats. There were even cheat books printed on paper...</div>
<div style=""><br /></div>
<div align="justify"><div class="separator" style=""><a href="https://z6543.github.io/_img/cheats10.jpg" src="https://z6543.github.io/_img/cheats10.jpg" style="margin-left: 1em; margin-right: 1em;"><img align="justify" border="0" height="" src="https://z6543.github.io/_img/cheats10.jpg" width="228" /></a></div></div>
<div style=""><br /></div>
<h2 style="text-align: justify;">The different types of cheats (on PC)</h2>
<div style="">There are different types of cheats in PC gaming. Following is a noncomplete list of these cheats:<br /><br /></div>
<h3 style="text-align: justify;">Cheat codes</h3>
<div style="">The good old IDDQD type of cheats. These are left in the game by the developers intentionally. Nothing interesting here.<br /><br /></div>
<h3 style="text-align: justify;">Edit memory</h3>
<div style="">This is my favorite. I will talk about this at the end of the post. Whenever a user launches a new program, the program's whole memory is accessible (read/write) to every other program launched by the user. And since the memory stores the current game state (health, ammo, armor, etc.), these values can be changed easily. In the good old times, there were <a href="http://ready64.it/articoli/_files/043_pokesc64.txt" target="_blank">POKE</a> commands to do this cheats, and the memory address to write into was published by people who found where the game stores the most critical states about the game.<br /><br /></div>
<div class="separator" style=""><a href="https://z6543.github.io/_img/hqdefault.jpg" src="https://z6543.github.io/_img/hqdefault.jpg" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="" src="https://z6543.github.io/_img/hqdefault.jpg" width="400" /></a></div>
<h3 style="text-align: justify;"></h3>
<h3 style="text-align: justify;">Code injection</h3>
<div style="">This is like patching the game code. For example, one can change the "DEC (pointer to your current health)" instruction with NOP (do nothing), thus becoming invincible. In multi-player cheats, there is the aimbot to help you aim at enemies, wallhack to see through the wall, increase hitbox of the enemy for smoother hit, or in MMORPGs, one can write macros to collect items while the player is not online. I would say the so-called "<a href="http://en.wikipedia.org/wiki/Trainer_(games)" target="_blank">trainers</a>" more or less fit into this category and the previous one.<br /><br /></div>
<h3 style="text-align: justify;">Saved game editor</h3>
<div><div style="">The first time a kid meets a hex-editor <i>(just like the co-author of this blog did with SIM City when he was 10 years old - David)</i>. It can teach a lot about file structures, the hexadecimal numeral system, etc. Fun times. </div><div style=""><br /></div></div>
<h3 style="text-align: justify;">Hacking game server</h3>
<div><div style="">Not very common, but even more fun. Warning: endless trolling possibilities in multi-player games ahead :) How to hack a game server? Well, I think this might deserve another full blog post ...</div><div style=""><br /></div></div>
<h3 style="text-align: justify;">Network traffic hacking</h3>
<div><div style="">One last necessary type of cheating is to modify network traffic between the client and the game server. AFAIK SSL is not universal in gaming, so stunnel is not needed for this hack, but ettercap can help in changing the communication.</div></div>
<div style=""><br /></div>
<h2 style="text-align: justify;">Why cheating becomes more critical (and challenging)?</h2>
<div style="">Now in the age of in-app-payments, the game creators are no longer thinking about cheats as funny things but something to be destroyed to the ground. Because cheating decreases its revenue. Or not. At least they think it does. To quote Wikipedia here, "cheating in such games is nonetheless a legal grey area because there are no laws against modifying software which is already owned, as detailed in the Digital Millennium Copyright Act." </div>
<div style=""><br /></div>
<div style="">A lot of online games include anti-cheating components like PunkBuster, nProtect GameGuard, or Valve Anti-Cheat. This whole cheating/anti-cheating industry is the same as the virus/anti-virus industry. A cat and mouse game.<br /><br /></div>
<h3 style="text-align: justify;">Freemium games</h3>
<div style="">If you have not played with "freemium" games, you should watch South Park season 18, episode 6. - "Freemium Isn't Free." If you did play with freemium games, you definitely have to watch it :) There are many problems with freemium games. It is free to install, free to play. The first 3-4 hours might be fun to play. But after that, it turns out it is impossible to advance in the game without paying money for it. And by spending cash, I mean spending a LOT! Let's have a look at today's example, an arcade racing video game.</div>
<div style=""><br /></div>
<div class="separator" style=""><a href="https://z6543.github.io/_img/asphalt1.png" src="https://z6543.github.io/_img/asphalt1.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="" src="https://z6543.github.io/_img/asphalt1.png" width="640" /></a></div>
<div style=""><br /></div>
<div style="">For 99.99 USD, you can get 3 000 000 credit. For almost double the price of a new PC game, you can get these credits. In this particular game, I estimate one have to play ~6-24 hours constantly to get this amount of credit. But by playing ~6 hours, I mean 6 hours without progress in the game! Kind of boring. And what do you get from 3 000 000 credit? You can buy one of the most expensive cars, but can't tune them fully. You have to play more (without progress) or buy more. But guess what, there are more cars you can't buy by only playing the game. Those are only available via in-app-purchase.<br /><br /></div>
<div class="separator" style=""><a href="https://z6543.github.io/_img/asphalt2.png" src="https://z6543.github.io/_img/asphalt2.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="" src="https://z6543.github.io/_img/asphalt2.png" width="400" /></a></div>
<div style=""><br /></div>
<div style="">Even though the player has 58 765 533 credits, it is not possible to buy this car. Only available through real money.<br /><br /></div>
<div class="separator" style=""><a href="https://z6543.github.io/_img/asphalt3.png" src="https://z6543.github.io/_img/asphalt3.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="" src="https://z6543.github.io/_img/asphalt3.png" width="400" /></a></div>
<div style=""><br /></div>
<div style="">So, what are your possibilities? You are either Richie Rich, and can afford the money to buy these. Or you can be insane, and try to play the game without in-app-purchase. Or give up the game and try another freemium ... Or, you can try to hack the game!<br /><br /></div>
<h2 style="text-align: justify;">Hack all the freemium games!</h2>
<div style="">Although I was not playing this racing game from day one, I was able to witness the evolution of the cheats against this game. The cheats which worked in one day was not working one month later. The game is continuously updated to defeat the newly published cheats.<br /><br /></div>
<h3 style="text-align: justify;">Noob start</h3>
<div style="">So, I want to hack this game, what is the first thing a noob like me does? <strike>Bing it!</strike> Google it! </div>
<div style="">From the first page result, let's check this tool:</div>
<div class="separator" style=""><br /></div>
<div class="separator" style=""><a href="https://z6543.github.io/_img/Asphalt-8-Airborne-Hack-Tool-Screenshot.png" src="https://z6543.github.io/_img/Asphalt-8-Airborne-Hack-Tool-Screenshot.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="" src="https://z6543.github.io/_img/Asphalt-8-Airborne-Hack-Tool-Screenshot.png" width="390" /></a></div>
<div class="separator" style=""><br /></div>
<div class="separator" style="">While trying to download that, I just have to give my email address to spammers, or my mobile number will be subscribed to premium rate text messages. What fun.</div>
<div class="separator" style=""><br /></div>
<div class="separator" style=""><a href="https://z6543.github.io/_img/asphalt4.png" src="https://z6543.github.io/_img/asphalt4.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="" src="https://z6543.github.io/_img/asphalt4.png" width="400" /></a></div>
<div style=""><br /></div>
<div style="">Another "cheat" program will install malware/adware on your computer. <b><u><span style="color: red;">Never ever try these programs.</span></u></b> They are fake 99% of the time and after installing those you will have another problem, not just how to hack freemium games.<br /><br /></div>
<h3 style="text-align: justify;">Beginners start - Cheat engine</h3>
<div><span style="text-align: justify;">When I first heard about hacking games in memory, I visualized hours of OllyDBG/ImmunityDBG/(insert your favorite Windows debugger here). It turned out, there are some specialized tools to help you with cheating the game. No assembly knowledge required. My favourite tool is </span><a href="http://www.cheatengine.org/downloads.php" style="text-align: justify;" target="_blank">CheatEngine</a><span style="text-align: justify;">. I highly recommend to download it and spend 10 minutes to get past the built-in tutorial levels to get a feeling about this tool. It's super duper awesome.</span><br /><span style="text-align: justify;"><br /></span></div>
<div class="separator" style=""><a href="https://z6543.github.io/_img/cheat.png" src="https://z6543.github.io/_img/cheat.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="" src="https://z6543.github.io/_img/cheat.png" width="640" /></a></div>
<div><span style="text-align: justify;"><br /></span></div>
<div><span style="text-align: justify;"><br /></span></div>
<div><div style="">When I first tried to hack this game myself, I scanned the memory for my actual credit and tried to change that, no luck. Keep reading, you will see what happened.<br /><br />The second cheat I tried with cheat engine was <a href="https://www.youtube.com/watch?v=kz9k4vOpns0" target="_blank">something like this</a>: </div></div>
<div><ol><li style="text-align: justify;">Start the game, play the first level, and check how many credits is paid for winning the race. Pro tip: use dual display for full-screen game cheating.</li><li style="text-align: justify;">Restart the same level, attach Cheat Engine to the game's process</li><li style="text-align: justify;">Scan the memory for the same value at the beginning of the race</li><li style="text-align: justify;">Scan the memory for the same value at the end of the game. The intersect of the first and second scan includes the real value where the credit is stored for winning the race.</li><li style="text-align: justify;">Change the values (both the real one and some false positives) to something big</li><li style="text-align: justify;">Watch the game to crash</li><li style="text-align: justify;">Be amazed at the money you received</li></ol><div><div style="">Nowadays, most of the cheats on YouTube does not work. Except for these <a href="https://www.youtube.com/watch?v=f5a3CGVLwAI" target="_blank">kind of cheats</a>. I don't want to recreate that tutorial, so you should watch it first then come back.<br /><br /><div class="separator" style=""><a href="https://z6543.github.io/_img/asphalt5.png" src="https://z6543.github.io/_img/asphalt5.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="" src="https://z6543.github.io/_img/asphalt5.png" width="616" /></a></div><br /><br /></div></div></div>
<div><div style="">Are you back? Great. Do you have any idea what have you just seen? No? Well, in this case, don't try this at home. Copy-pasting <a href="http://blog.zoller.lu/2009/07/0pen0wnc-shellcode-dissasembled.html" target="_blank">assembly code from random internet posts</a> and running on your computer is always a bad idea. It is precisely as risky as downloading free programs from random internet sites.<br /><br />Although I have not seen people trolling others with this cheat engine type of shellcode, I think the time will come when these will be turned into something terrible. These shellcodes might work, or might harm your computer. The good news is, we can have a look at the code and analyze it. </div></div>
<div><div style=""><br /></div></div>
<div><div style="">When you open CheatEngine and try to define a new custom type, you are greeted with a skeleton assembly code. I don't want to detail what all the skeleton code does, let's just focus on the difference between the skeleton code and the code used in the video. This is the "decrypt function":</div></div>
<div><div style=""><br /></div></div>
<pre class="prettyprint">xor eax, 0baadf00d<br />rol eax, 0e<br /></pre>
<div style=""><br /></div>
<div><div style="">What does it mean? The actual credit is encrypted in memory. If you want to scan it in memory, you won't be able to find it. But! The encryption is rotating the value to the right (ROR) with 0xE (14 in decimal), and after that, it is XOR-ed with 0xbaadf00d. Decrypting it is the inverse of the functions in reverse order (in this particular case, the order does not matter, but that's not the point). The inverse function of XOR is XOR, and the inverse function of ROR (rotate right) is ROL (rotate left). Now that we analyzed the assembly code, we can be sure that it is safe to execute. Just follow the video and see your coins falling from the sky. For free. In a freemium game. Have fun!<br /><br /><h3>Encrypt memory - applications at financial institutions</h3></div><div style="">Another exciting thing is that I don't recall any thick client applications in the financial industry encrypting the values in memory. And I agree, there are more significant problems with thick client applications than not encrypting the essential values in memory. But still, some thick client applications are regularly updated, maintained. Maybe it is a good idea to encrypt the values in memory. It will make attackers' life harder. Not impossible, but harder. Perhaps the developers of these applications should learn from the gaming industry (or from malware developers for that matter) because it is a shame that an arcade racing game or an FPS is protected better than an application responsible for transacting millions of dollars. Just think about the RAM scraping malware stealing millions of credit card data ...<br /><br /></div><h2 style="text-align: justify;">Moral of the story</h2></div>
<div style="">Cheating is part of the gaming history, and the freemium games are trying to take away the cheats from the gamers because they want money. Thanks to CheatEngine and some clever hacks, these programs can be still beaten. And guess what, there is CheatEngine for Android - although it did not work for me on the latest Android. And sometimes, hacking all kinds of applications can be more comfortable with CheatEngine, compared to traditional debuggers.<br /><br />Also, always check the code before executing it! And when you find something cool, publish it, so everyone could enjoy the games!<br /><br /><br /></div>]]></content><author><name></name></author><category term="cheating" /><category term="freemium" /><category term="games" /><category term="hacking" /><summary type="html"><![CDATA[This post is going to be a rather strange post compared to previous ones. But bear with me, in the middle of the post you will see why this post fits the IT security topic. I'm also terribly sorry for not posting recently, but I was busy with my SPSE and SLAE certification. Both are recommended for Python and Assembly noobs like me. But back to this post. A little bit of history Cheating in games started as help for game testers. By using invincibility or infinite ammo testers were able to test the game quicker, which meant less money spent on testing. I personally use cheat codes in games, depending on my mood. Sometimes it feels good to slash all the opponents while I'm invincible, sometimes it is more fun to play the game without cheats. One can argue whether cheating in games is OK or not, but I believe it depends, there is no black or white. But one thing is for sure, it is part of the gaming industry. There is huge demand for cheats. There were even cheat books printed on paper... The different types of cheats (on PC) There are different types of cheats in PC gaming. Following is a noncomplete list of these cheats: Cheat codes The good old IDDQD type of cheats. These are left in the game by the developers intentionally. Nothing interesting here. Edit memory This is my favorite. I will talk about this at the end of the post. Whenever a user launches a new program, the program's whole memory is accessible (read/write) to every other program launched by the user. And since the memory stores the current game state (health, ammo, armor, etc.), these values can be changed easily. In the good old times, there were POKE commands to do this cheats, and the memory address to write into was published by people who found where the game stores the most critical states about the game. Code injection This is like patching the game code. For example, one can change the "DEC (pointer to your current health)" instruction with NOP (do nothing), thus becoming invincible. In multi-player cheats, there is the aimbot to help you aim at enemies, wallhack to see through the wall, increase hitbox of the enemy for smoother hit, or in MMORPGs, one can write macros to collect items while the player is not online. I would say the so-called "trainers" more or less fit into this category and the previous one. Saved game editor The first time a kid meets a hex-editor (just like the co-author of this blog did with SIM City when he was 10 years old - David). It can teach a lot about file structures, the hexadecimal numeral system, etc. Fun times.  Hacking game server Not very common, but even more fun. Warning: endless trolling possibilities in multi-player games ahead :) How to hack a game server? Well, I think this might deserve another full blog post ... Network traffic hacking One last necessary type of cheating is to modify network traffic between the client and the game server. AFAIK SSL is not universal in gaming, so stunnel is not needed for this hack, but ettercap can help in changing the communication. Why cheating becomes more critical (and challenging)? Now in the age of in-app-payments, the game creators are no longer thinking about cheats as funny things but something to be destroyed to the ground. Because cheating decreases its revenue. Or not. At least they think it does. To quote Wikipedia here, "cheating in such games is nonetheless a legal grey area because there are no laws against modifying software which is already owned, as detailed in the Digital Millennium Copyright Act."  A lot of online games include anti-cheating components like PunkBuster, nProtect GameGuard, or Valve Anti-Cheat. This whole cheating/anti-cheating industry is the same as the virus/anti-virus industry. A cat and mouse game. Freemium games If you have not played with "freemium" games, you should watch South Park season 18, episode 6. - "Freemium Isn't Free." If you did play with freemium games, you definitely have to watch it :) There are many problems with freemium games. It is free to install, free to play. The first 3-4 hours might be fun to play. But after that, it turns out it is impossible to advance in the game without paying money for it. And by spending cash, I mean spending a LOT! Let's have a look at today's example, an arcade racing video game. For 99.99 USD, you can get 3 000 000 credit. For almost double the price of a new PC game, you can get these credits. In this particular game, I estimate one have to play ~6-24 hours constantly to get this amount of credit. But by playing ~6 hours, I mean 6 hours without progress in the game! Kind of boring. And what do you get from 3 000 000 credit? You can buy one of the most expensive cars, but can't tune them fully. You have to play more (without progress) or buy more. But guess what, there are more cars you can't buy by only playing the game. Those are only available via in-app-purchase. Even though the player has 58 765 533 credits, it is not possible to buy this car. Only available through real money. So, what are your possibilities? You are either Richie Rich, and can afford the money to buy these. Or you can be insane, and try to play the game without in-app-purchase. Or give up the game and try another freemium ... Or, you can try to hack the game! Hack all the freemium games! Although I was not playing this racing game from day one, I was able to witness the evolution of the cheats against this game. The cheats which worked in one day was not working one month later. The game is continuously updated to defeat the newly published cheats. Noob start So, I want to hack this game, what is the first thing a noob like me does? Bing it! Google it!  From the first page result, let's check this tool: While trying to download that, I just have to give my email address to spammers, or my mobile number will be subscribed to premium rate text messages. What fun. Another "cheat" program will install malware/adware on your computer. Never ever try these programs. They are fake 99% of the time and after installing those you will have another problem, not just how to hack freemium games. Beginners start - Cheat engine When I first heard about hacking games in memory, I visualized hours of OllyDBG/ImmunityDBG/(insert your favorite Windows debugger here). It turned out, there are some specialized tools to help you with cheating the game. No assembly knowledge required. My favourite tool is CheatEngine. I highly recommend to download it and spend 10 minutes to get past the built-in tutorial levels to get a feeling about this tool. It's super duper awesome. When I first tried to hack this game myself, I scanned the memory for my actual credit and tried to change that, no luck. Keep reading, you will see what happened.The second cheat I tried with cheat engine was something like this:  Start the game, play the first level, and check how many credits is paid for winning the race. Pro tip: use dual display for full-screen game cheating.Restart the same level, attach Cheat Engine to the game's processScan the memory for the same value at the beginning of the raceScan the memory for the same value at the end of the game. The intersect of the first and second scan includes the real value where the credit is stored for winning the race.Change the values (both the real one and some false positives) to something bigWatch the game to crashBe amazed at the money you receivedNowadays, most of the cheats on YouTube does not work. Except for these kind of cheats. I don't want to recreate that tutorial, so you should watch it first then come back. Are you back? Great. Do you have any idea what have you just seen? No? Well, in this case, don't try this at home. Copy-pasting assembly code from random internet posts and running on your computer is always a bad idea. It is precisely as risky as downloading free programs from random internet sites.Although I have not seen people trolling others with this cheat engine type of shellcode, I think the time will come when these will be turned into something terrible. These shellcodes might work, or might harm your computer. The good news is, we can have a look at the code and analyze it.  When you open CheatEngine and try to define a new custom type, you are greeted with a skeleton assembly code. I don't want to detail what all the skeleton code does, let's just focus on the difference between the skeleton code and the code used in the video. This is the "decrypt function": xor eax, 0baadf00drol eax, 0e What does it mean? The actual credit is encrypted in memory. If you want to scan it in memory, you won't be able to find it. But! The encryption is rotating the value to the right (ROR) with 0xE (14 in decimal), and after that, it is XOR-ed with 0xbaadf00d. Decrypting it is the inverse of the functions in reverse order (in this particular case, the order does not matter, but that's not the point). The inverse function of XOR is XOR, and the inverse function of ROR (rotate right) is ROL (rotate left). Now that we analyzed the assembly code, we can be sure that it is safe to execute. Just follow the video and see your coins falling from the sky. For free. In a freemium game. Have fun!Encrypt memory - applications at financial institutionsAnother exciting thing is that I don't recall any thick client applications in the financial industry encrypting the values in memory. And I agree, there are more significant problems with thick client applications than not encrypting the essential values in memory. But still, some thick client applications are regularly updated, maintained. Maybe it is a good idea to encrypt the values in memory. It will make attackers' life harder. Not impossible, but harder. Perhaps the developers of these applications should learn from the gaming industry (or from malware developers for that matter) because it is a shame that an arcade racing game or an FPS is protected better than an application responsible for transacting millions of dollars. Just think about the RAM scraping malware stealing millions of credit card data ...Moral of the story Cheating is part of the gaming history, and the freemium games are trying to take away the cheats from the gamers because they want money. Thanks to CheatEngine and some clever hacks, these programs can be still beaten. And guess what, there is CheatEngine for Android - although it did not work for me on the latest Android. And sometimes, hacking all kinds of applications can be more comfortable with CheatEngine, compared to traditional debuggers.Also, always check the code before executing it! And when you find something cool, publish it, so everyone could enjoy the games!]]></summary></entry><entry><title type="html">How to build a “burner device” for DEF CON in one easy step</title><link href="https://httpscolonforwardslashforwardslashwwwdotzoltanbalazsdotcom.com/build/burner/laptop/phone/defcon/howto/2018/08/15/How-to-build-a-burner-device-for-DEF-CON-in-one-easy-step.html" rel="alternate" type="text/html" title="How to build a “burner device” for DEF CON in one easy step" /><published>2018-08-15T13:31:11+00:00</published><updated>2018-08-15T13:31:11+00:00</updated><id>https://httpscolonforwardslashforwardslashwwwdotzoltanbalazsdotcom.com/build/burner/laptop/phone/defcon/howto/2018/08/15/How-to-build-a-%22burner-device%22-for-DEF-CON-in-one-easy-step</id><content type="html" xml:base="https://httpscolonforwardslashforwardslashwwwdotzoltanbalazsdotcom.com/build/burner/laptop/phone/defcon/howto/2018/08/15/How-to-build-a-burner-device-for-DEF-CON-in-one-easy-step.html"><![CDATA[<div style="">TL;DR: Don't build a burner device. Probably this is not the risk you are looking for.</div>
<h3 style="text-align: justify;">Introduction</h3>
<div style="">Every year before DEF CON people starts to give <a href="https://blog.erratasec.com/2017/07/burner-laptops-for-def-con.html" target="_blank">advice</a> to attendees to bring "burner devices" to DEF CON. Some people also start to create <a href="https://github.com/CrowdStrike/travel-laptop" target="_blank">long lists</a> on how to build burner devices, especially laptops. But the deeper we look into the topic, the more confusing it gets. Why are we doing this? Why are we recommending this? Are we focusing on the right things?</div>
<h3 style="text-align: justify;">What is a "burner device" used for?</h3>
<div style="">For starters, the whole "burner device" concept is totally misunderstood, even within the ITSEC community. A "burner device" is used for non-attribution. You know, for example, you are a spy and you don't want the country where you live to know that you are communicating with someone else. I believe this is not the situation for most attendees at DEF CON. More info about the meaning of "burner" <a href="https://twitter.com/Viss/status/877400669669306369" target="_blank">https://twitter.com/Viss/status/877400669669306369</a></div>
<div style=""><br /></div>
<div style="">Burner phone means it has a throwaway SIM card with a throwaway phone, used for one specific operation only. <b>You don't use the "burner device" to log in to your e-mail account or to VPN to your work or home.</b></div>
<div class="separator" style=""><a href="https://z6543.github.io/_img/2524_86.JPG" src="https://z6543.github.io/_img/2524_86.JPG" style="margin-left: 1em; margin-right: 1em;"><img border="0" data-original-height="1024" data-original-width="768" height="" src="https://z6543.github.io/_img/2524_86.JPG" width="300" /></a></div>
<div style="">But let's forget this word misuse issue for a moment, and focus on the real problem.</div>
<h3 style="text-align: justify;">The bad advice</h3>
<div style="">The Internet is full of articles focusing on the wrong things, especially when it comes to "burner devices". Like how to build a burner laptop, without explaining why you need it or how to use it.</div>
<div style="">The problem with this approach is that people end up "burning" (lame wordplay, sorry) significant resources for building a secure "burner device". But people are not educated about how they should use these devices.</div>
<h3 style="text-align: justify;">The threats</h3>
<div style="">I believe the followings are some real threats which are higher when you travel:</div>
<div style="">1. The laptop getting lost or stolen.</div>
<div style="">2. The laptop getting inspected/copied at the border.</div>
<div style=""><br /></div>
<div style="">These two risks have nothing to do with DEF CON, this is true for every travel.</div>
<div style=""><br /></div>
<div style="">Some other risks which are usually mentioned when it comes to "burner devices" and DEF CON:</div>
<div style="">3. Device getting owned via physical access while in a hotel room.</div>
<div class="separator" style=""><a href="https://z6543.github.io/_img/Capture.PNG" src="https://z6543.github.io/_img/Capture.PNG" style="margin-left: 1em; margin-right: 1em;"><img border="0" data-original-height="513" data-original-width="616" height="" src="https://z6543.github.io/_img/Capture.PNG" width="640" /></a></div>
<div style="">4. Network traffic Man-in-the-middle attacked. Your password displayed on a Wall of Sheep. Or having fun with <a href="https://twitter.com/parkerschmitt/status/515415443528351744" target="_blank">Shellshock </a>with DHCP. Information leak of NTLM hashes or similar.</div>
<div class="separator" style=""><a href="https://z6543.github.io/_img/Capture2.PNG" src="https://z6543.github.io/_img/Capture2.PNG" style="margin-left: 1em; margin-right: 1em;"><img border="0" data-original-height="598" data-original-width="679" height="" src="https://z6543.github.io/_img/Capture2.PNG" width="400" /></a></div>
<div style="">5. Pwning the device via some nasty things like WiFi/TCP/Bluetooth/LTE/3G/GSM stack. These are unicorn attacks.</div>
<div class="separator" style=""><a href="https://z6543.github.io/_img/b95.png" src="https://z6543.github.io/_img/b95.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" data-original-height="1600" data-original-width="1377" height="" src="https://z6543.github.io/_img/b95.png" width="275" /></a></div>
<div style=""><br /></div>
<div style="">6. Pwning your device by pwning a service on your device. Like leaving your upload.php file in the root folder you use at CTFs and Nginx is set to autostart. The author of this article cannot comment on this incident whether it happened in real life or is just an imaginary example. </div>
<h3 style="text-align: justify;">How to mitigate these risks? </h3>
<div style="">Laptop getting stolen/lost/inspected at the border?</div>
<div style="">1. Bring a cheap, empty device with you. Or set up a fake OS/fake account to log in if you really need your day-to-day laptop. This dummy account should not decrypt the real files in the real account.</div>
<div class="separator" style=""><a href="https://z6543.github.io/_img/c05916387.png" src="https://z6543.github.io/_img/c05916387.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" data-original-height="430" data-original-width="573" height="" src="https://z6543.github.io/_img/c05916387.png" width="640" /></a></div>
<h4 style="text-align: justify;">Device getting owned while in a hotel room with physical access</h4>
<div style="">1. Don't bring any device with you.</div>
<div style="">2. If you bring any, make it tamper-resistant. How to do that depends on your enemy, but you can start by using nail glitter and Full Disk Encryption. Tools like Do Not Disturb help. It also helps if your OS supports suspending DMA devices before the user logs in.</div>
<div class="separator" style=""><a href="https://z6543.github.io/_img/tamper_4.png" src="https://z6543.github.io/_img/tamper_4.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" data-original-height="688" data-original-width="1020" height="" src="https://z6543.github.io/_img/tamper_4.png" width="400" /></a></div>
<div style="">3. If you can't make the device tamper-resistant, use a device that has a good defense against physical attackers, like iOS.</div>
<div style="">4. Probably you are not that important anyway that anyone will spend time and resources on you. If they do, probably you will only make your life miserable with all the hardening, but still, get pwned.</div>
<h4 style="text-align: justify;">Network traffic Man-in-the-middle attacked</h4>
<div style="">1. Don't bring any device with you.</div>
<div style="">2. Use services that are protected against MiTM. Like TLS.</div>
<div style="">3. Update your OS to the latest and greatest versions. Not everyone at DEF CON has a 0dayz worth of 100K USD, and even the ones who have won't waste it on you. </div>
<div style="">4. Use fail-safe VPN. Unfortunately, not many people talk about this or have proper solutions for the most popular operating systems.</div>
<div style="">5. For specific attacks like Responder, disable<a href="http://www.pciqsatalk.com/2016/03/disable-lmnr-netbios.html" target="_blank"> LLMNR, NBT-NS</a>, <a href="https://stackoverflow.com/a/41048991" target="_blank">WPAD, </a>and <a href="https://medium.com/@JockDaRock/disabling-ipv6-on-network-adapter-windows-10-5fad010bca75" target="_blank">IPv6 </a>and use a non-work account on the machine. If you don't have the privileges to do so on your machine, you probably should not bring this device with you. Or ask your local IT to disable these services and set up a new account for you.</div>
<div class="separator" style=""><a href="https://z6543.github.io/_img/win10.png" src="https://z6543.github.io/_img/win10.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" data-original-height="714" data-original-width="1366" height="" src="https://z6543.github.io/_img/win10.png" width="640" /></a></div>
<h4 style="text-align: justify;">Pwning the device via some nasty thing like WiFi/TCP/Bluetooth/LTE/3G/GSM stack</h4>
<div style="">1. Don't bring any device with you.</div>
<div style="">2. If you bring any, do not use this device to log in to work, personal email, social media, etc.</div>
<div style="">3. Don't worry, these things don't happen very often. </div>
<h4 style="text-align: justify;">Pwning your device by pwning a service on your device</h4>
<div style="">Just set up a firewall profile where all services are hidden from the outside. You rarely need any service accessible on your device at a hacker conference.</div>
<h3 style="text-align: justify;">Conclusion</h3>
<div style="">If you are still so afraid to go there, just don't go there. Watch the talks at home. But how is the hotel WiFi at a random place different from a hacker conference? <a href="https://securelist.com/the-darkhotel-apt/66779/" target="_blank">Turns out, it is not much different</a>, so you better spend time and resources on hardening your daily work devices for 365 days, instead of building a "burner device".</div>
<div style=""><br /></div>
<div style="">You probably need a "burner device" if you are a spy for a foreign government. Or you are the head of a criminal organization. Otherwise, you don't need a burner device. Maybe you need to bring a cheap replacement device.</div>]]></content><author><name></name></author><category term="build" /><category term="burner" /><category term="laptop" /><category term="phone" /><category term="defcon" /><category term="howto" /><summary type="html"><![CDATA[TL;DR: Don't build a burner device. Probably this is not the risk you are looking for. Introduction Every year before DEF CON people starts to give advice to attendees to bring "burner devices" to DEF CON. Some people also start to create long lists on how to build burner devices, especially laptops. But the deeper we look into the topic, the more confusing it gets. Why are we doing this? Why are we recommending this? Are we focusing on the right things? What is a "burner device" used for? For starters, the whole "burner device" concept is totally misunderstood, even within the ITSEC community. A "burner device" is used for non-attribution. You know, for example, you are a spy and you don't want the country where you live to know that you are communicating with someone else. I believe this is not the situation for most attendees at DEF CON. More info about the meaning of "burner" https://twitter.com/Viss/status/877400669669306369 Burner phone means it has a throwaway SIM card with a throwaway phone, used for one specific operation only. You don't use the "burner device" to log in to your e-mail account or to VPN to your work or home. But let's forget this word misuse issue for a moment, and focus on the real problem. The bad advice The Internet is full of articles focusing on the wrong things, especially when it comes to "burner devices". Like how to build a burner laptop, without explaining why you need it or how to use it. The problem with this approach is that people end up "burning" (lame wordplay, sorry) significant resources for building a secure "burner device". But people are not educated about how they should use these devices. The threats I believe the followings are some real threats which are higher when you travel: 1. The laptop getting lost or stolen. 2. The laptop getting inspected/copied at the border. These two risks have nothing to do with DEF CON, this is true for every travel. Some other risks which are usually mentioned when it comes to "burner devices" and DEF CON: 3. Device getting owned via physical access while in a hotel room. 4. Network traffic Man-in-the-middle attacked. Your password displayed on a Wall of Sheep. Or having fun with Shellshock with DHCP. Information leak of NTLM hashes or similar. 5. Pwning the device via some nasty things like WiFi/TCP/Bluetooth/LTE/3G/GSM stack. These are unicorn attacks. 6. Pwning your device by pwning a service on your device. Like leaving your upload.php file in the root folder you use at CTFs and Nginx is set to autostart. The author of this article cannot comment on this incident whether it happened in real life or is just an imaginary example.  How to mitigate these risks?  Laptop getting stolen/lost/inspected at the border? 1. Bring a cheap, empty device with you. Or set up a fake OS/fake account to log in if you really need your day-to-day laptop. This dummy account should not decrypt the real files in the real account. Device getting owned while in a hotel room with physical access 1. Don't bring any device with you. 2. If you bring any, make it tamper-resistant. How to do that depends on your enemy, but you can start by using nail glitter and Full Disk Encryption. Tools like Do Not Disturb help. It also helps if your OS supports suspending DMA devices before the user logs in. 3. If you can't make the device tamper-resistant, use a device that has a good defense against physical attackers, like iOS. 4. Probably you are not that important anyway that anyone will spend time and resources on you. If they do, probably you will only make your life miserable with all the hardening, but still, get pwned. Network traffic Man-in-the-middle attacked 1. Don't bring any device with you. 2. Use services that are protected against MiTM. Like TLS. 3. Update your OS to the latest and greatest versions. Not everyone at DEF CON has a 0dayz worth of 100K USD, and even the ones who have won't waste it on you.  4. Use fail-safe VPN. Unfortunately, not many people talk about this or have proper solutions for the most popular operating systems. 5. For specific attacks like Responder, disable LLMNR, NBT-NS, WPAD, and IPv6 and use a non-work account on the machine. If you don't have the privileges to do so on your machine, you probably should not bring this device with you. Or ask your local IT to disable these services and set up a new account for you. Pwning the device via some nasty thing like WiFi/TCP/Bluetooth/LTE/3G/GSM stack 1. Don't bring any device with you. 2. If you bring any, do not use this device to log in to work, personal email, social media, etc. 3. Don't worry, these things don't happen very often.  Pwning your device by pwning a service on your device Just set up a firewall profile where all services are hidden from the outside. You rarely need any service accessible on your device at a hacker conference. Conclusion If you are still so afraid to go there, just don't go there. Watch the talks at home. But how is the hotel WiFi at a random place different from a hacker conference? Turns out, it is not much different, so you better spend time and resources on hardening your daily work devices for 365 days, instead of building a "burner device". You probably need a "burner device" if you are a spy for a foreign government. Or you are the head of a criminal organization. Otherwise, you don't need a burner device. Maybe you need to bring a cheap replacement device.]]></summary></entry><entry><title type="html">Recovering data from an old encrypted Time Machine backup</title><link href="https://httpscolonforwardslashforwardslashwwwdotzoltanbalazsdotcom.com/forensics/macos/nas/time/capsule/machine/2018/07/21/Recovering-data-from-an-old-encrypted-Time-Machine-backup.html" rel="alternate" type="text/html" title="Recovering data from an old encrypted Time Machine backup" /><published>2018-07-21T13:32:30+00:00</published><updated>2018-07-21T13:32:30+00:00</updated><id>https://httpscolonforwardslashforwardslashwwwdotzoltanbalazsdotcom.com/forensics/macos/nas/time/capsule/machine/2018/07/21/Recovering-data-from-an-old-encrypted-Time-Machine-backup</id><content type="html" xml:base="https://httpscolonforwardslashforwardslashwwwdotzoltanbalazsdotcom.com/forensics/macos/nas/time/capsule/machine/2018/07/21/Recovering-data-from-an-old-encrypted-Time-Machine-backup.html"><![CDATA[<p>Recovering data from a backup should be an easy thing to do. At least this is what you expect. Yesterday I had a problem which should have been easy to solve, but it was not. I hope this blog post can help others who face the same problem.</p>

<div class="separator" style=""><a href="https://z6543.github.io/_img/macos-high-sierra-system-preferences-time-machine.jpg" imageanchor="1" src="https://z6543.github.io/_img/macos-high-sierra-system-preferences-time-machine.jpg" style="margin-left: 1em; margin-right: 1em;"><img border="0" data-original-height="881" data-original-width="1336" height="" src="https://z6543.github.io/_img/macos-high-sierra-system-preferences-time-machine.jpg" width="400" /></a></div>
<h2>The problem</h2>
<ol>
  <li>I had an encrypted Time Machine backup which was not used for months</li>
  <li>This backup was not on an official Apple Time Capsule or on a USB HDD, but on a WD MyCloud NAS</li>
  <li>I needed files from this backup</li>
  <li>After running out of time I only had SSH access to the macOS, no GUI</li>
</ol>

<h2>The struggle</h2>
<p>By default, Time Machine is one of the best and easiest backup solution I have seen. As long as you stick to the default use case, where you have one active backup disk, life is pink and happy. But this was not my case.</p>

<p>As always, I started to Google what shall I do. One of the first options recommended that I add the backup disk to Time Machine, and it will automagically show the backup snapshots from the old backup. Instead of this, it did not show the old snapshots but started to create a new backup. Panic button has been pressed, backup canceled, back to Google.</p>
<div class="separator" style=""><a href="https://1.bp.blogspot.com/-9Die_5TbKPc/W1BFBZBDAcI/AAAAAAAACrE/jla8CDuxZh8S83G-piox8g9FqzH9IBPvwCLcBGAs/s1600/use-additional-backup-drive-time-machine.jpeg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" data-original-height="321" data-original-width="516" height="199" src="https://1.bp.blogspot.com/-9Die_5TbKPc/W1BFBZBDAcI/AAAAAAAACrE/jla8CDuxZh8S83G-piox8g9FqzH9IBPvwCLcBGAs/s320/use-additional-backup-drive-time-machine.jpeg" width="320" /></a></div>

<p>Other tutorials recommend to click on the Time Machine icon and pressing alt (Option) key, where I can choose “Browse other backup disks”. But this did not list the old Time Machine backup. It did list the backup when selecting disks in Time Machine preferences, but I already tried and failed that way.</p>
<div class="separator" style=""><a href="https://3.bp.blogspot.com/-qIZjV8XjqtU/W1BE3bvCtwI/AAAAAAAACrA/tO8szi90eP8EntDpnv42WHzv7If__keogCLcBGAs/s1600/browse-additional-backup-disks.jpeg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" data-original-height="191" data-original-width="437" height="139" src="https://3.bp.blogspot.com/-qIZjV8XjqtU/W1BE3bvCtwI/AAAAAAAACrA/tO8szi90eP8EntDpnv42WHzv7If__keogCLcBGAs/s320/browse-additional-backup-disks.jpeg" width="320" /></a></div>

<p>YAT (yet another tutorial) recommended to SSH into the NAS, and browse the backup disk, as it is just a simple directory where I can see all the files. But all the files inside where just a bunch of nonsense, no real directory structure.</p>

<p>YAT (yet another tutorial) recommended that I can just easily browse the content of the backup from the Finder by double-clicking on the sparse bundle file. After clicking on it, I can see the disk image on the left part of the Finder, attached as a new disk.
Well, this is true, but because of some bug, when you connect to the Time Capsule, you don’t see the sparse bundle file. And I got inconsistent results, for the WD NAS, double-clicking on the sparse bundle did nothing. For the Time Capsule, it did work.
At this point, I had to leave the location where the backup was present, and I only had remote SSH access. You know, if you can’t solve a problem, let’s complicate things by restrict yourself in solutions.
<span style="color: red;">
</span>Finally, I tried to check out some data forensics blogs, and besides some expensive tools, I could find the solution.</p>
<h2>The solution</h2>
<p>Finally, a <a href="https://d4rkw1ll0w4n6.wordpress.com/2015/02/12/timemachine-4n6/" target="_blank">blog post</a> provided the real solution - hdiutil.
The best part of hdiutil is that you can provide the read-only flag to it. This can be very awesome when it comes to forensics acquisition.</p>

<div class="separator" style=""><a href="https://z6543.github.io/_img/Screen2BShot2B2018-07-192Bat2B09.54.50.png" imageanchor="1" src="https://z6543.github.io/_img/Screen2BShot2B2018-07-192Bat2B09.54.50.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" data-original-height="389" data-original-width="1596" height="" src="https://z6543.github.io/_img/Screen2BShot2B2018-07-192Bat2B09.54.50.png" width="400" /></a></div>
<p>To mount any NAS via SMB:</p>
<pre class="prettyprint lang-bsh">mount_smbfs afp://&lt;username&gt;@&lt;NAS_IP&gt;/&lt;Share_for_backup&gt; /&lt;mountpoint&gt;</pre>
<p>To mount a Time Capsule share via AFP:</p>
<pre class="prettyprint lang-bsh">mount_afp afp://any_username:password@&lt;Time_Capsule_IP&gt;/&lt;Share_for_backup&gt; /&lt;mountpoint&gt;</pre>
<p>And finally this command should do the job:</p>
<pre class="prettyprint lang-bsh">hdiutil attach test.sparsebundle -readonly</pre>
<p>It is nice that you can provide read-only parameter.</p>

<p>If the backup was encrypted and you don’t want to provide the password in a password prompt, use the following:</p>
<pre class="prettyprint lang-bsh">printf '%s' 'CorrectHorseBatteryStaple' | hdiutil attach test.sparsebundle -stdinpass -readonly</pre>
<p>Note: if you receive the error “resource temporarily unavailable”, probably another machine is backing up to the device</p>

<p>And now, you can find your backup disk under /Volumes. Happy restoring!</p>

<p>Probably it would have been quicker to either enable the remote GUI, or to physically travel to the system and login locally, but that would spoil the fun.</p>]]></content><author><name></name></author><category term="forensics" /><category term="macos" /><category term="nas" /><category term="time" /><category term="capsule" /><category term="machine" /><summary type="html"><![CDATA[Recovering data from a backup should be an easy thing to do. At least this is what you expect. Yesterday I had a problem which should have been easy to solve, but it was not. I hope this blog post can help others who face the same problem.]]></summary></entry><entry><title type="html">Why (I believe) WADA was not hacked by the Russians</title><link href="https://httpscolonforwardslashforwardslashwwwdotzoltanbalazsdotcom.com/attribution/hack/russia/wada/2016/10/17/Why-(I-believe)-WADA-was-not-hacked-by-the-Russians.html" rel="alternate" type="text/html" title="Why (I believe) WADA was not hacked by the Russians" /><published>2016-10-17T13:35:24+00:00</published><updated>2016-10-17T13:35:24+00:00</updated><id>https://httpscolonforwardslashforwardslashwwwdotzoltanbalazsdotcom.com/attribution/hack/russia/wada/2016/10/17/Why-(I-believe)-WADA-was-not-hacked-by-the-Russians</id><content type="html" xml:base="https://httpscolonforwardslashforwardslashwwwdotzoltanbalazsdotcom.com/attribution/hack/russia/wada/2016/10/17/Why-(I-believe)-WADA-was-not-hacked-by-the-Russians.html"><![CDATA[<p>Disclaimer: This is my personal opinion. I am not an expert in attribution. But as it turns out, not many people in the world are good at attribution. I know this post lacks real evidence and is mostly based on speculation.</p>

<div class="separator" style=""><a href="https://z6543.github.io/_img/wada.png" imageanchor="1" src="https://z6543.github.io/_img/wada.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="" src="https://z6543.github.io/_img/wada.png" width="320" /></a></div>

<p>Let’s start with the main facts we know about the WADA hack, in chronological order:</p>

<ol>
  <li>Some point in time (August - September 2016), the WADA database has been hacked and exfiltrated</li>
</ol>
<div>2. August 15th, "WADA has alerted their stakeholders that email phishing scams are being reported in connection with WADA and therefore asks its recipients to be careful"  <a href="https://m.paralympic.org/news/wada-warns-stakeholders-phishing-scams">https://m.paralympic.org/news/wada-warns-stakeholders-phishing-scams</a>
3. September 1st, the fancybear.net domain has been registered
<div><pre style="font-family: &quot;Courier New&quot;, monospace; font-size: 13px;">   Domain Name: FANCYBEAR.NET
   ...
   Updated Date: 18-sep-2016
   Creation Date: 01-sep-2016</pre><pre style="font-family: &quot;Courier New&quot;, monospace; font-size: 13px;"></pre></div>4. The content of the WADA hack has been published on the website
5. The @FancyBears and @FancyBearsHT Twitter accounts have been created and started to tweet on 12th September, reaching out to journalists
6. 12th September, Western media started headlines "Russia hacked WADA"</div>
<div>7. The leaked documents have been altered, states WADA <a href="https://www.wada-ama.org/en/media/news/2016-10/cyber-security-update-wadas-incident-response">https://www.wada-ama.org/en/media/news/2016-10/cyber-security-update-wadas-incident-response</a>


<h3>The Threatconnect analysis</h3>The only technical analysis on why Russia was behind the hack, can be read here: <a href="https://www.threatconnect.com/blog/fancy-bear-anti-doping-agency-phishing/">https://www.threatconnect.com/blog/fancy-bear-anti-doping-agency-phishing/</a>

After reading this, I was able to collect the following main points:

<ol><li>It is Russia because Russian APT groups are capable of phishing</li><li>It is Russia because the phishing site "wada-awa[.]org was registered and uses a name server from ITitch[.]com, a domain registrar that FANCY BEAR actors recently used"</li><li>It is Russia because "Wada-arna[.]org and tas-cass[.]org were registered through and use name servers from Domains4bitcoins[.]com, a registrar that has also been associated with FANCY BEAR activity."</li><li>It is Russia, because "The registration of these domains on August 3rd and 8th, 2016 are consistent with the timeline in which the WADA recommended banning all Russian athletes from the Olympic and Paralympic games."</li><li>It is Russia, because "The use of 1&amp;1 mail.com webmail addresses to register domains matches a TTP we previously identified for FANCY BEAR actors."</li></ol>
There is an interesting side-track in the article, the case of the @anpoland account. Let me deal with this at the end of this post.

My problem with the above points is that all five flag was publicly accessible to anyone as TTP's for Fancy Bear. And meanwhile, all five is weak evidence. Any script kittie in the world is capable of both hacking WADA and planting these false-flags.

A stronger than these weak pieces of evidence would be:

<ul><li>Malware sharing same code attributed to Fancy Bear (where the code is not publicly available or circulating on hackforums)</li><li>Private servers sharing the IP address with previous attacks attributed to Fancy Bear (where the server is not a hacked server or a proxy used by multiple parties)</li><li>E-mail addresses used to register the domain attributed to Fancy Bear</li><li>Many other things</li></ul><div>For me, it is quite strange that after such <a href="https://www.threatconnect.com/blog/guccifer-2-0-dnc-breach/" target="_blank">great analysis on Guccifer 2.0</a>, the Threatconnect guys came up with this low-value post. </div><div>
</div>
<h3>The fancybear website</h3>It is quite unfortunate that the analysis was not updated after the documents have been leaked. But let's just have a look at the fancybear . net website, shall we?
<div class="separator" style=""><a href="https://z6543.github.io/_img/screencapture-fancybear-net-1476519267721.png" imageanchor="1" src="https://z6543.github.io/_img/screencapture-fancybear-net-1476519267721.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="" src="https://z6543.github.io/_img/screencapture-fancybear-net-1476519267721.png" width="130" /></a></div>
Now the question is, if you are a Russian state-sponsored hacker group, and you are already accused of the hack itself, do you create a website with tons of bears on the website, and do you choose the same name (Fancy Bear) for your "Hack team" that is already used by Crowdstrike to refer to a Russian state-sponsored hacker group? Well, for me, it makes no sense. Now I can hear people screaming: "The Russians changed tactics to confuse us". Again, it makes no sense to change tactics on this, while keeping tactics on the "evidence" found by Threatconnect.

It makes sense that a Russian state-sponsored group creates a fake persona, names it Guccifer 2.0, pretends Guccifer 2.0 is from Romania, but in the end it turns out Guccifer 2.0 isn't a native Romanian speaker. That really makes sense.

What happens when someone creates this fancybear website for leaking the docs, and from the Twitter account reaches out to the media? Journalists check the website, they see it was done by Fancy Bear, they <strike>Bing</strike> Google this name, and clearly see it is a Russian state-sponsored hacker group. Some journalists also found the Threatconnect report, which seems very convincing for the first read. I mean, it is a work of experts, right? So you can write in the headlines that the hack was done by the Russians.

Just imagine an expert in the USA or Canada writing in report for WADA:
"the hack was done by non-Russian, but state-sponsored actors, who planted a lot of false-flags to accuse the Russians and to destroy confidence in past and future leaks". Well, I am sure this is not a popular opinion, and whoever tries this, risks his career. Experts are human, subject to all kinds of bias.

<h3>The Guardian</h3>The only other source I was able to find is from The Guardian, where not just one side (it was Russia) was represented in the article. It is quite unfortunate that both experts are from Russia - so people from USA will call them being not objective on the matter. But the fact that they are Russian experts does not mean they are not true ...

<a href="https://www.theguardian.com/sport/2016/sep/15/fancy-bears-hackers--russia-wada-tues-leaks">https://www.theguardian.com/sport/2016/sep/15/fancy-bears-hackers--russia-wada-tues-leaks</a>

Sergei Nikitin:
“We don’t have this in the case of the DNC and Wada hacks, so it’s not clear on what basis conclusions are being drawn that Russian hackers or special services were involved. It’s done on the basis of the website design, which is absurd,” he said, referring to the depiction of symbolically Russian animals, brown and white bears, on the “Fancy Bears’ Hack Team” website.

I don't agree with the DNC part, but this is not the topic of conversation here.

Alexander Baranov:
"the hackers were most likely amateurs who published a “semi-finished product” rather than truly compromising information. “They could have done this more harshly and suddenly,” he said. “If it was [state-sponsored] hackers, they would have dug deeper. Since it’s enthusiasts, amateurs, they got what they got and went public with it.”"

<h3>The @anpoland side-track</h3>First please check the tas-cas.org hack <a href="https://www.youtube.com/watch?v=day5Aq0bHsA%C2%A0" target="_blank">https://www.youtube.com/watch?v=day5Aq0bHsA </a> , I will be here when you finished it. This is a website for "Court of Arbitration for Sport’s", and referring to the Threatconnect post, "CAS is the highest international tribunal that was established to settle disputes related to sport through arbitration. Starting in 2016, an anti-doping division of CAS began judging doping cases at the Olympic Games, replacing the IOC disciplinary commission." Now you can see why this attack is also discussed here.
<div class="separator" style=""><a href="https://z6543.github.io/_img/anpoland.png" imageanchor="1" src="https://z6543.github.io/_img/anpoland.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="" src="https://z6543.github.io/_img/anpoland.png" width="320" /></a></div>

<ul><li>My bet is that this machine was set-up for these @anpoland videos only. Whether google.ru is a false flag or it is real, hard to decide. It is interesting to see that there is no google search done via google.ru, it is used only once. </li><li>The creator of the video can't double click. Is it because he has a malfunctioning mouse? Is it because he uses a virtualization console, which is near-perfect OPSEC to hide your real identity? My personal experience is that using virtualization consoles remotely (e.g. RDP) has very similar effects to what we can see on the video. </li><li>The timeline of the Twitter account is quite strange, registered in 2010</li><li>I agree with the Threatconnect analysis that this @anpoland account is probably a faketivist, and not an activist. But who is behind it, remains a mystery. </li><li>Either the "activist" is using a whonix-like setup for remaining anonymous, or a TOR router (something like <a href="https://makezine.com/projects/browse-anonymously-with-a-diy-raspberry-pi-vpntor-router/" target="_blank">this</a>), or does not care about privacy at all. Looking at the response times (SQLmap, web browser), I doubt this "activist" is behind anything related to TOR. Which makes no sense for an activist, who publishes his hack on Youtube. People are stupid for sure, but this does not add up. It makes sense that this was a server (paid by bitcoins or stolen credit cards or whatever) rather than a home computer.</li></ul><div>For me, this whole @anpoland thing makes no sense, and I think it is just loosely connected to the WADA hack. </div>
<h3>The mysterious Korean characters in the HTML source</h3><div>There is another interesting flag in the whole story, which actually makes no sense. When the website was published, there were Korean characters in HTML comments. </div><div><a href="https://web.archive.org/web/20160913013727/http://fancybear.net/">https://web.archive.org/web/20160913013727/http://fancybear.net/</a></div><div class="separator" style=""><a href="https://z6543.github.io/_img/korean1.png" imageanchor="1" src="https://z6543.github.io/_img/korean1.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="" src="https://z6543.github.io/_img/korean1.png" width="320" /></a></div>
<div class="separator" style=""></div><div>
</div><div>
</div><div>When someone pointed this out on Twitter, these Korean HTML comments disappeared:</div><div><a href="https://web.archive.org/web/20160914231209/http://www.fancybear.net/">https://web.archive.org/web/20160914231209/http://www.fancybear.net/</a></div><div class="separator" style=""><a href="https://z6543.github.io/_img/korean2.png" imageanchor="1" src="https://z6543.github.io/_img/korean2.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="" src="https://z6543.github.io/_img/korean2.png" width="320" /></a></div><div>These HTML comments look like generated HTML comments, from a WYSIWYG editor, which is using the Korean language. Let me know if you can identify the editor.</div><div>
</div><h3>The Russians are denying it</h3><div>Well, what choice they have? It does not matter if they did this or not, they will deny it. And they can't deny this differently. Just imagine a spokesperson: "Previously we have falsely denied the DCC and DNC hacks, but this time please believe us, this wasn't Russia." Sounds plausible ...

</div><h3>Attribution</h3>Let me sum up what we know:

It makes sense that the WADA hack was done by Russia, because:

<ol><li>Russia being almost banned from the Olympics due to doping scandal, it made sense to discredit WADA and US Olympians</li><li>There are multiple(weak) pieces of evidence which point to Russia</li></ol><div>It makes sense that the WADA hack was not done by  Russia, because: </div><div><ol><li>By instantly attributing the hack to the Russians, the story was more about to discredit Russia than discrediting WADA or US Olympians.</li><li>In reality, there was no gain for Russia for disclosing the documents. Nothing happened, nothing changed, no discredit for WADA. Not a single case turned out to be illegal or unethical.</li><li><strike>Altering the leaked documents makes no sense if it was Russia</strike> (see update at the end). Altering the leaked documents makes a lot of sense if it was not Russia. Because from now on, people can always state "these leaks cannot be trusted, so it is not true what is written there". It is quite cozy for any US organization, who has been hacked or will be hacked. If you are interested in the "Russians forging leaked documents" debate, I highly recommend to start with this <a href="https://theintercept.com/2016/10/11/in-the-democratic-echo-chamber-inconvenient-truths-are-recast-as-putin-plots/" target="_blank">The Intercept</a> article</li><li>If the Korean characters were false flags planted by the Russians, why would they remove it? If it had been Russian characters, I would understand removing it.</li><li>All evidence against Russia is weak, can be easily forged by even any script kittie.</li></ol><div>
</div>I don't like guessing, but here is my guess. This WADA hack was an operation of a (non-professional) hackers-for-hire service, paid by an enemy of Russia. The goal was to hack WADA, leak the documents, modify some contents in the documents, and blame it all on the Russians ...

<h3>Questions and answers</h3></div><div><ul><li>Was Russia capable of doing this WADA hack? Yes.</li><li>Was Russia hacking WADA? Maybe yes, maybe not.</li><li>Was this leak done by a Russian state-sponsored hacker group? I highly doubt that.</li><li>Is it possible to buy an attribution-dice where all six-side is Russia? No, it is sold-out. </li></ul></div><div>
</div><div>To quote Patrick Gray: "Russia is the new China, and the Russians ate my homework."©</div><div>
</div><div>Let me know what you think about this, and please comment. </div><div>
</div><div>Update: As TheGrugq pointed out, Guccifer has been found to alter documents <a href="https://www.reddit.com/r/EnoughTrumpSpam/comments/4uyih3/russian_hackers_altered_emails_before_release_to/?st=IUJDLSIE&amp;sh=e195e908" style="font-family: 'Helvetica Neue Light', HelveticaNeue-Light, helvetica, arial, sans-serif;">https://www.reddit.com/r/EnoughTrumpSpam/comments/4uyih3/russian_hackers_altered_emails_before_release_to/?st=IUJDLSIE&amp;sh=e195e908</a></div></div>]]></content><author><name></name></author><category term="attribution" /><category term="Hack" /><category term="Russia" /><category term="WADA" /><summary type="html"><![CDATA[Disclaimer: This is my personal opinion. I am not an expert in attribution. But as it turns out, not many people in the world are good at attribution. I know this post lacks real evidence and is mostly based on speculation.]]></summary></entry></feed>